
TouchScreen_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f40  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004e660  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08053754  08053754  00063754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0805375c  0805375c  0006375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08053760  08053760  00063760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000054  20000000  08053764  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00070054  2**0
                  CONTENTS
  8 .bss          00000300  20000054  20000054  00070054  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000354  20000354  00070054  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00070054  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  00070084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001159e  00000000  00000000  000700c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac6  00000000  00000000  00081665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00084130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b26  00000000  00000000  00084ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bde2  00000000  00000000  00085b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130ae  00000000  00000000  000b18f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001008fc  00000000  00000000  000c49a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00003c98  00000000  00000000  001c52a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000008d  00000000  00000000  001c8f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000054 	.word	0x20000054
 80001d0:	00000000 	.word	0x00000000
 80001d4:	080050dc 	.word	0x080050dc

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000058 	.word	0x20000058
 80001f0:	080050dc 	.word	0x080050dc

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b970 	b.w	80004ec <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	460d      	mov	r5, r1
 800022c:	4604      	mov	r4, r0
 800022e:	460f      	mov	r7, r1
 8000230:	2b00      	cmp	r3, #0
 8000232:	d14a      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000234:	428a      	cmp	r2, r1
 8000236:	4694      	mov	ip, r2
 8000238:	d965      	bls.n	8000306 <__udivmoddi4+0xe2>
 800023a:	fab2 f382 	clz	r3, r2
 800023e:	b143      	cbz	r3, 8000252 <__udivmoddi4+0x2e>
 8000240:	fa02 fc03 	lsl.w	ip, r2, r3
 8000244:	f1c3 0220 	rsb	r2, r3, #32
 8000248:	409f      	lsls	r7, r3
 800024a:	fa20 f202 	lsr.w	r2, r0, r2
 800024e:	4317      	orrs	r7, r2
 8000250:	409c      	lsls	r4, r3
 8000252:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000256:	fa1f f58c 	uxth.w	r5, ip
 800025a:	fbb7 f1fe 	udiv	r1, r7, lr
 800025e:	0c22      	lsrs	r2, r4, #16
 8000260:	fb0e 7711 	mls	r7, lr, r1, r7
 8000264:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000268:	fb01 f005 	mul.w	r0, r1, r5
 800026c:	4290      	cmp	r0, r2
 800026e:	d90a      	bls.n	8000286 <__udivmoddi4+0x62>
 8000270:	eb1c 0202 	adds.w	r2, ip, r2
 8000274:	f101 37ff 	add.w	r7, r1, #4294967295
 8000278:	f080 811c 	bcs.w	80004b4 <__udivmoddi4+0x290>
 800027c:	4290      	cmp	r0, r2
 800027e:	f240 8119 	bls.w	80004b4 <__udivmoddi4+0x290>
 8000282:	3902      	subs	r1, #2
 8000284:	4462      	add	r2, ip
 8000286:	1a12      	subs	r2, r2, r0
 8000288:	b2a4      	uxth	r4, r4
 800028a:	fbb2 f0fe 	udiv	r0, r2, lr
 800028e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000292:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000296:	fb00 f505 	mul.w	r5, r0, r5
 800029a:	42a5      	cmp	r5, r4
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x90>
 800029e:	eb1c 0404 	adds.w	r4, ip, r4
 80002a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a6:	f080 8107 	bcs.w	80004b8 <__udivmoddi4+0x294>
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	f240 8104 	bls.w	80004b8 <__udivmoddi4+0x294>
 80002b0:	4464      	add	r4, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b8:	1b64      	subs	r4, r4, r5
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11e      	cbz	r6, 80002c6 <__udivmoddi4+0xa2>
 80002be:	40dc      	lsrs	r4, r3
 80002c0:	2300      	movs	r3, #0
 80002c2:	e9c6 4300 	strd	r4, r3, [r6]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d908      	bls.n	80002e0 <__udivmoddi4+0xbc>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80ed 	beq.w	80004ae <__udivmoddi4+0x28a>
 80002d4:	2100      	movs	r1, #0
 80002d6:	e9c6 0500 	strd	r0, r5, [r6]
 80002da:	4608      	mov	r0, r1
 80002dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e0:	fab3 f183 	clz	r1, r3
 80002e4:	2900      	cmp	r1, #0
 80002e6:	d149      	bne.n	800037c <__udivmoddi4+0x158>
 80002e8:	42ab      	cmp	r3, r5
 80002ea:	d302      	bcc.n	80002f2 <__udivmoddi4+0xce>
 80002ec:	4282      	cmp	r2, r0
 80002ee:	f200 80f8 	bhi.w	80004e2 <__udivmoddi4+0x2be>
 80002f2:	1a84      	subs	r4, r0, r2
 80002f4:	eb65 0203 	sbc.w	r2, r5, r3
 80002f8:	2001      	movs	r0, #1
 80002fa:	4617      	mov	r7, r2
 80002fc:	2e00      	cmp	r6, #0
 80002fe:	d0e2      	beq.n	80002c6 <__udivmoddi4+0xa2>
 8000300:	e9c6 4700 	strd	r4, r7, [r6]
 8000304:	e7df      	b.n	80002c6 <__udivmoddi4+0xa2>
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xe6>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f382 	clz	r3, r2
 800030e:	2b00      	cmp	r3, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x210>
 8000314:	1a8a      	subs	r2, r1, r2
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2101      	movs	r1, #1
 8000320:	fbb2 f5f7 	udiv	r5, r2, r7
 8000324:	fb07 2015 	mls	r0, r7, r5, r2
 8000328:	0c22      	lsrs	r2, r4, #16
 800032a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032e:	fb0e f005 	mul.w	r0, lr, r5
 8000332:	4290      	cmp	r0, r2
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x124>
 8000336:	eb1c 0202 	adds.w	r2, ip, r2
 800033a:	f105 38ff 	add.w	r8, r5, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4290      	cmp	r0, r2
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2b8>
 8000346:	4645      	mov	r5, r8
 8000348:	1a12      	subs	r2, r2, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000350:	fb07 2210 	mls	r2, r7, r0, r2
 8000354:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x14e>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x14c>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2c2>
 8000370:	4610      	mov	r0, r2
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800037a:	e79f      	b.n	80002bc <__udivmoddi4+0x98>
 800037c:	f1c1 0720 	rsb	r7, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa05 f401 	lsl.w	r4, r5, r1
 800038e:	fa20 f307 	lsr.w	r3, r0, r7
 8000392:	40fd      	lsrs	r5, r7
 8000394:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000398:	4323      	orrs	r3, r4
 800039a:	fbb5 f8f9 	udiv	r8, r5, r9
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	fb09 5518 	mls	r5, r9, r8, r5
 80003a6:	0c1c      	lsrs	r4, r3, #16
 80003a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ac:	fb08 f50e 	mul.w	r5, r8, lr
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2b4>
 80003c8:	42a5      	cmp	r5, r4
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2b4>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4464      	add	r4, ip
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	b29d      	uxth	r5, r3
 80003d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003dc:	fb09 4413 	mls	r4, r9, r3, r4
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2ac>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2ac>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	4464      	add	r4, ip
 80003fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000402:	fba3 9502 	umull	r9, r5, r3, r2
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	42ac      	cmp	r4, r5
 800040c:	46c8      	mov	r8, r9
 800040e:	46ae      	mov	lr, r5
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x29c>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x298>
 8000414:	b156      	cbz	r6, 800042c <__udivmoddi4+0x208>
 8000416:	ebb0 0208 	subs.w	r2, r0, r8
 800041a:	eb64 040e 	sbc.w	r4, r4, lr
 800041e:	fa04 f707 	lsl.w	r7, r4, r7
 8000422:	40ca      	lsrs	r2, r1
 8000424:	40cc      	lsrs	r4, r1
 8000426:	4317      	orrs	r7, r2
 8000428:	e9c6 7400 	strd	r7, r4, [r6]
 800042c:	4618      	mov	r0, r3
 800042e:	2100      	movs	r1, #0
 8000430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000434:	f1c3 0120 	rsb	r1, r3, #32
 8000438:	fa02 fc03 	lsl.w	ip, r2, r3
 800043c:	fa20 f201 	lsr.w	r2, r0, r1
 8000440:	fa25 f101 	lsr.w	r1, r5, r1
 8000444:	409d      	lsls	r5, r3
 8000446:	432a      	orrs	r2, r5
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1510 	mls	r5, r7, r0, r1
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045e:	fb00 f50e 	mul.w	r5, r0, lr
 8000462:	428d      	cmp	r5, r1
 8000464:	fa04 f403 	lsl.w	r4, r4, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x258>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 8000474:	428d      	cmp	r5, r1
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 8000478:	3802      	subs	r0, #2
 800047a:	4461      	add	r1, ip
 800047c:	1b49      	subs	r1, r1, r5
 800047e:	b292      	uxth	r2, r2
 8000480:	fbb1 f5f7 	udiv	r5, r1, r7
 8000484:	fb07 1115 	mls	r1, r7, r5, r1
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	fb05 f10e 	mul.w	r1, r5, lr
 8000490:	4291      	cmp	r1, r2
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x282>
 8000494:	eb1c 0202 	adds.w	r2, ip, r2
 8000498:	f105 38ff 	add.w	r8, r5, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2a8>
 800049e:	4291      	cmp	r1, r2
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2a8>
 80004a2:	3d02      	subs	r5, #2
 80004a4:	4462      	add	r2, ip
 80004a6:	1a52      	subs	r2, r2, r1
 80004a8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0xfc>
 80004ae:	4631      	mov	r1, r6
 80004b0:	4630      	mov	r0, r6
 80004b2:	e708      	b.n	80002c6 <__udivmoddi4+0xa2>
 80004b4:	4639      	mov	r1, r7
 80004b6:	e6e6      	b.n	8000286 <__udivmoddi4+0x62>
 80004b8:	4610      	mov	r0, r2
 80004ba:	e6fb      	b.n	80002b4 <__udivmoddi4+0x90>
 80004bc:	4548      	cmp	r0, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c8:	3b01      	subs	r3, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004cc:	4645      	mov	r5, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x282>
 80004d0:	462b      	mov	r3, r5
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x258>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004dc:	3d02      	subs	r5, #2
 80004de:	4462      	add	r2, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x124>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e70a      	b.n	80002fc <__udivmoddi4+0xd8>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x14e>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b0b2      	sub	sp, #200	; 0xc8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 80004fa:	2078      	movs	r0, #120	; 0x78
 80004fc:	f000 fa0e 	bl	800091c <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 8000500:	4ac8      	ldr	r2, [pc, #800]	; (8000824 <NT35510_Init+0x334>)
 8000502:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000506:	e892 0003 	ldmia.w	r2, {r0, r1}
 800050a:	6018      	str	r0, [r3, #0]
 800050c:	3304      	adds	r3, #4
 800050e:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 8000510:	4bc5      	ldr	r3, [pc, #788]	; (8000828 <NT35510_Init+0x338>)
 8000512:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 8000516:	4bc5      	ldr	r3, [pc, #788]	; (800082c <NT35510_Init+0x33c>)
 8000518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 800051c:	4bc4      	ldr	r3, [pc, #784]	; (8000830 <NT35510_Init+0x340>)
 800051e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8000522:	4bc4      	ldr	r3, [pc, #784]	; (8000834 <NT35510_Init+0x344>)
 8000524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 8000528:	4bc3      	ldr	r3, [pc, #780]	; (8000838 <NT35510_Init+0x348>)
 800052a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 800052e:	4bc3      	ldr	r3, [pc, #780]	; (800083c <NT35510_Init+0x34c>)
 8000530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 8000534:	f240 13bf 	movw	r3, #447	; 0x1bf
 8000538:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 800053c:	4bc0      	ldr	r3, [pc, #768]	; (8000840 <NT35510_Init+0x350>)
 800053e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 8000542:	4bc0      	ldr	r3, [pc, #768]	; (8000844 <NT35510_Init+0x354>)
 8000544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 8000548:	4bbf      	ldr	r3, [pc, #764]	; (8000848 <NT35510_Init+0x358>)
 800054a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 800054e:	4bbf      	ldr	r3, [pc, #764]	; (800084c <NT35510_Init+0x35c>)
 8000550:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8000554:	4bbe      	ldr	r3, [pc, #760]	; (8000850 <NT35510_Init+0x360>)
 8000556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 800055a:	4bbe      	ldr	r3, [pc, #760]	; (8000854 <NT35510_Init+0x364>)
 800055c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8000560:	4abd      	ldr	r2, [pc, #756]	; (8000858 <NT35510_Init+0x368>)
 8000562:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000566:	6812      	ldr	r2, [r2, #0]
 8000568:	4611      	mov	r1, r2
 800056a:	8019      	strh	r1, [r3, #0]
 800056c:	3302      	adds	r3, #2
 800056e:	0c12      	lsrs	r2, r2, #16
 8000570:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8000572:	4aba      	ldr	r2, [pc, #744]	; (800085c <NT35510_Init+0x36c>)
 8000574:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800057c:	6018      	str	r0, [r3, #0]
 800057e:	3304      	adds	r3, #4
 8000580:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8000582:	4ab7      	ldr	r2, [pc, #732]	; (8000860 <NT35510_Init+0x370>)
 8000584:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000588:	6812      	ldr	r2, [r2, #0]
 800058a:	4611      	mov	r1, r2
 800058c:	8019      	strh	r1, [r3, #0]
 800058e:	3302      	adds	r3, #2
 8000590:	0c12      	lsrs	r2, r2, #16
 8000592:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8000594:	f240 33b6 	movw	r3, #950	; 0x3b6
 8000598:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 800059c:	f245 13b5 	movw	r3, #20917	; 0x51b5
 80005a0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 80005a4:	4aaf      	ldr	r2, [pc, #700]	; (8000864 <NT35510_Init+0x374>)
 80005a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005aa:	6812      	ldr	r2, [r2, #0]
 80005ac:	4611      	mov	r1, r2
 80005ae:	8019      	strh	r1, [r3, #0]
 80005b0:	3302      	adds	r3, #2
 80005b2:	0c12      	lsrs	r2, r2, #16
 80005b4:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 80005b6:	4aac      	ldr	r2, [pc, #688]	; (8000868 <NT35510_Init+0x378>)
 80005b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c0:	6018      	str	r0, [r3, #0]
 80005c2:	3304      	adds	r3, #4
 80005c4:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 80005c6:	f04f 433c 	mov.w	r3, #3154116608	; 0xbc000000
 80005ca:	667b      	str	r3, [r7, #100]	; 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 80005cc:	4ba7      	ldr	r3, [pc, #668]	; (800086c <NT35510_Init+0x37c>)
 80005ce:	663b      	str	r3, [r7, #96]	; 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 80005d0:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 80005d4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 80005d8:	2336      	movs	r3, #54	; 0x36
 80005da:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 80005de:	4aa4      	ldr	r2, [pc, #656]	; (8000870 <NT35510_Init+0x380>)
 80005e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e8:	6018      	str	r0, [r3, #0]
 80005ea:	3304      	adds	r3, #4
 80005ec:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 80005ee:	4aa1      	ldr	r2, [pc, #644]	; (8000874 <NT35510_Init+0x384>)
 80005f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f8:	6018      	str	r0, [r3, #0]
 80005fa:	3304      	adds	r3, #4
 80005fc:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 80005fe:	f246 0336 	movw	r3, #24630	; 0x6036
 8000602:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 8000606:	4a9c      	ldr	r2, [pc, #624]	; (8000878 <NT35510_Init+0x388>)
 8000608:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800060c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000610:	6018      	str	r0, [r3, #0]
 8000612:	3304      	adds	r3, #4
 8000614:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 8000616:	4a99      	ldr	r2, [pc, #612]	; (800087c <NT35510_Init+0x38c>)
 8000618:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800061c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000620:	6018      	str	r0, [r3, #0]
 8000622:	3304      	adds	r3, #4
 8000624:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 8000626:	2335      	movs	r3, #53	; 0x35
 8000628:	863b      	strh	r3, [r7, #48]	; 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 800062a:	2311      	movs	r3, #17
 800062c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 800062e:	2329      	movs	r3, #41	; 0x29
 8000630:	853b      	strh	r3, [r7, #40]	; 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 8000632:	f647 7351 	movw	r3, #32593	; 0x7f51
 8000636:	84bb      	strh	r3, [r7, #36]	; 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8000638:	f642 4353 	movw	r3, #11347	; 0x2c53
 800063c:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 800063e:	f240 2355 	movw	r3, #597	; 0x255
 8000642:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8000644:	f64f 735e 	movw	r3, #65374	; 0xff5e
 8000648:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 800064a:	232c      	movs	r3, #44	; 0x2c
 800064c:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 800064e:	f245 533a 	movw	r3, #21818	; 0x553a
 8000652:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8000654:	f247 733a 	movw	r3, #30522	; 0x773a
 8000658:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 800065a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800065e:	4619      	mov	r1, r3
 8000660:	2005      	movs	r0, #5
 8000662:	f000 fc05 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8000666:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800066a:	4619      	mov	r1, r3
 800066c:	2003      	movs	r0, #3
 800066e:	f000 fbff 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 8000672:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000676:	4619      	mov	r1, r3
 8000678:	2003      	movs	r0, #3
 800067a:	f000 fbf9 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 800067e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000682:	4619      	mov	r1, r3
 8000684:	2003      	movs	r0, #3
 8000686:	f000 fbf3 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 800068a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800068e:	4619      	mov	r1, r3
 8000690:	2003      	movs	r0, #3
 8000692:	f000 fbed 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8000696:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800069a:	4619      	mov	r1, r3
 800069c:	2003      	movs	r0, #3
 800069e:	f000 fbe7 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 80006a2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80006a6:	4619      	mov	r1, r3
 80006a8:	2003      	movs	r0, #3
 80006aa:	f000 fbe1 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 80006ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006b2:	4619      	mov	r1, r3
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 fbdb 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 80006ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006be:	4619      	mov	r1, r3
 80006c0:	2003      	movs	r0, #3
 80006c2:	f000 fbd5 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 80006c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006ca:	4619      	mov	r1, r3
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 fbcf 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 80006d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006d6:	4619      	mov	r1, r3
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 fbc9 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 80006de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80006e2:	4619      	mov	r1, r3
 80006e4:	2003      	movs	r0, #3
 80006e6:	f000 fbc3 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 80006ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80006ee:	4619      	mov	r1, r3
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 fbbd 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 80006f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006fa:	4619      	mov	r1, r3
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 fbb7 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 8000702:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000706:	4619      	mov	r1, r3
 8000708:	2002      	movs	r0, #2
 800070a:	f000 fbb1 	bl	8000e70 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 800070e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000712:	4619      	mov	r1, r3
 8000714:	2005      	movs	r0, #5
 8000716:	f000 fbab 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 800071a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800071e:	4619      	mov	r1, r3
 8000720:	2002      	movs	r0, #2
 8000722:	f000 fba5 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 8000726:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800072a:	4619      	mov	r1, r3
 800072c:	2001      	movs	r0, #1
 800072e:	f000 fb9f 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 8000732:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000736:	4619      	mov	r1, r3
 8000738:	2001      	movs	r0, #1
 800073a:	f000 fb99 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 800073e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000742:	4619      	mov	r1, r3
 8000744:	2002      	movs	r0, #2
 8000746:	f000 fb93 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 800074a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800074e:	4619      	mov	r1, r3
 8000750:	2004      	movs	r0, #4
 8000752:	f000 fb8d 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 8000756:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800075a:	4619      	mov	r1, r3
 800075c:	2003      	movs	r0, #3
 800075e:	f000 fb87 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 8000762:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000766:	4619      	mov	r1, r3
 8000768:	2003      	movs	r0, #3
 800076a:	f000 fb81 	bl	8000e70 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 800076e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000772:	4619      	mov	r1, r3
 8000774:	2001      	movs	r0, #1
 8000776:	f000 fb7b 	bl	8000e70 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 800077a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800077e:	4619      	mov	r1, r3
 8000780:	2000      	movs	r0, #0
 8000782:	f000 fb75 	bl	8000e70 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	2000      	movs	r0, #0
 800078e:	f000 fb6f 	bl	8000e70 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 8000792:	20c8      	movs	r0, #200	; 0xc8
 8000794:	f000 f8c2 	bl	800091c <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d112      	bne.n	80007c4 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 800079e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007a2:	4619      	mov	r1, r3
 80007a4:	2001      	movs	r0, #1
 80007a6:	f000 fb63 	bl	8000e70 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 80007aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007ae:	4619      	mov	r1, r3
 80007b0:	2004      	movs	r0, #4
 80007b2:	f000 fb5d 	bl	8000e70 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 80007b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ba:	4619      	mov	r1, r3
 80007bc:	2004      	movs	r0, #4
 80007be:	f000 fb57 	bl	8000e70 <DSI_IO_WriteCmd>
 80007c2:	e011      	b.n	80007e8 <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 80007c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007c8:	4619      	mov	r1, r3
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 fb50 	bl	8000e70 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 80007d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007d4:	4619      	mov	r1, r3
 80007d6:	2004      	movs	r0, #4
 80007d8:	f000 fb4a 	bl	8000e70 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 80007dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007e0:	4619      	mov	r1, r3
 80007e2:	2004      	movs	r0, #4
 80007e4:	f000 fb44 	bl	8000e70 <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 80007e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ec:	4619      	mov	r1, r3
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 fb3e 	bl	8000e70 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 80007f4:	2078      	movs	r0, #120	; 0x78
 80007f6:	f000 f891 	bl	800091c <NT35510_IO_Delay>

  switch(ColorCoding)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d009      	beq.n	8000814 <NT35510_Init+0x324>
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d13c      	bne.n	8000880 <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	4619      	mov	r1, r3
 800080c:	2001      	movs	r0, #1
 800080e:	f000 fb2f 	bl	8000e70 <DSI_IO_WriteCmd>
      break;
 8000812:	e03c      	b.n	800088e <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	2001      	movs	r0, #1
 800081c:	f000 fb28 	bl	8000e70 <DSI_IO_WriteCmd>
      break;
 8000820:	e035      	b.n	800088e <NT35510_Init+0x39e>
 8000822:	bf00      	nop
 8000824:	080050f4 	.word	0x080050f4
 8000828:	b0030303 	.word	0xb0030303
 800082c:	b6464646 	.word	0xb6464646
 8000830:	b1030303 	.word	0xb1030303
 8000834:	b7363636 	.word	0xb7363636
 8000838:	b2020000 	.word	0xb2020000
 800083c:	b8262626 	.word	0xb8262626
 8000840:	b3090909 	.word	0xb3090909
 8000844:	b9363636 	.word	0xb9363636
 8000848:	b5080808 	.word	0xb5080808
 800084c:	ba262626 	.word	0xba262626
 8000850:	bc008000 	.word	0xbc008000
 8000854:	bd008000 	.word	0xbd008000
 8000858:	080050fc 	.word	0x080050fc
 800085c:	08005100 	.word	0x08005100
 8000860:	08005108 	.word	0x08005108
 8000864:	0800510c 	.word	0x0800510c
 8000868:	08005110 	.word	0x08005110
 800086c:	cc000003 	.word	0xcc000003
 8000870:	08005118 	.word	0x08005118
 8000874:	08005120 	.word	0x08005120
 8000878:	08005128 	.word	0x08005128
 800087c:	08005130 	.word	0x08005130
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	2001      	movs	r0, #1
 8000888:	f000 faf2 	bl	8000e70 <DSI_IO_WriteCmd>
      break;
 800088c:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	4619      	mov	r1, r3
 8000894:	2001      	movs	r0, #1
 8000896:	f000 faeb 	bl	8000e70 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	4619      	mov	r1, r3
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 fae5 	bl	8000e70 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 fadf 	bl	8000e70 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	4619      	mov	r1, r3
 80008b8:	2001      	movs	r0, #1
 80008ba:	f000 fad9 	bl	8000e70 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 80008be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c2:	4619      	mov	r1, r3
 80008c4:	2000      	movs	r0, #0
 80008c6:	f000 fad3 	bl	8000e70 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	2000      	movs	r0, #0
 80008d2:	f000 facd 	bl	8000e70 <DSI_IO_WriteCmd>

  return 0;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	37c8      	adds	r7, #200	; 0xc8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <BSP_LED_On>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d80c      	bhi.n	800090a <BSP_LED_On+0x2a>
  {
     HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <BSP_LED_On+0x34>)
 80008f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4a07      	ldr	r2, [pc, #28]	; (8000918 <BSP_LED_On+0x38>)
 80008fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000900:	b29b      	uxth	r3, r3
 8000902:	2200      	movs	r2, #0
 8000904:	4619      	mov	r1, r3
 8000906:	f002 fbd5 	bl	80030b4 <HAL_GPIO_WritePin>
  }

}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000010 	.word	0x20000010
 8000918:	20000000 	.word	0x20000000

0800091c <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f000 fee7 	bl	80016f8 <HAL_Delay>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
  /* Disco Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <BSP_LCD_Reset+0x64>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a15      	ldr	r2, [pc, #84]	; (8000998 <BSP_LCD_Reset+0x64>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <BSP_LCD_Reset+0x64>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PH7 */
    gpio_init_structure.Pin   = GPIO_PIN_7;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	607b      	str	r3, [r7, #4]
#if defined(USE_STM32469I_DISCO_REVC)
    /* Push Pull Mode is required for TechShine LCD (NT35510) */
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	60bb      	str	r3, [r7, #8]
#else
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
#endif
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	4619      	mov	r1, r3
 800096a:	480c      	ldr	r0, [pc, #48]	; (800099c <BSP_LCD_Reset+0x68>)
 800096c:	f002 f9f6 	bl	8002d5c <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <BSP_LCD_Reset+0x68>)
 8000976:	f002 fb9d 	bl	80030b4 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800097a:	2014      	movs	r0, #20
 800097c:	f000 febc 	bl	80016f8 <HAL_Delay>

    /* Deactivate XRES */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <BSP_LCD_Reset+0x68>)
 8000986:	f002 fb95 	bl	80030b4 <HAL_GPIO_WritePin>
    
    /* Wait for 20ms after releasing XRES before sending commands */
    HAL_Delay(20);    
 800098a:	2014      	movs	r0, #20
 800098c:	f000 feb4 	bl	80016f8 <HAL_Delay>
#else
  /* Nothing to do in case of Disco Rev A */
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 8000990:	bf00      	nop
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40021c00 	.word	0x40021c00

080009a0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <BSP_LCD_GetXSize+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000038 	.word	0x20000038

080009b8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <BSP_LCD_GetYSize+0x14>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	2000003c 	.word	0x2000003c

080009d0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b090      	sub	sp, #64	; 0x40
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80009e0:	f7ff ffde 	bl	80009a0 <BSP_LCD_GetXSize>
 80009e4:	4603      	mov	r3, r0
 80009e6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80009ec:	f7ff ffe4 	bl	80009b8 <BSP_LCD_GetYSize>
 80009f0:	4603      	mov	r3, r0
 80009f2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80009fc:	23ff      	movs	r3, #255	; 0xff
 80009fe:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000a16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000a20:	f7ff ffbe 	bl	80009a0 <BSP_LCD_GetXSize>
 8000a24:	4603      	mov	r3, r0
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000a28:	f7ff ffc6 	bl	80009b8 <BSP_LCD_GetYSize>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 8000a30:	88fa      	ldrh	r2, [r7, #6]
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4619      	mov	r1, r3
 8000a38:	4812      	ldr	r0, [pc, #72]	; (8000a84 <BSP_LCD_LayerDefaultInit+0xb4>)
 8000a3a:	f002 fd52 	bl	80034e2 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000a3e:	88fa      	ldrh	r2, [r7, #6]
 8000a40:	4911      	ldr	r1, [pc, #68]	; (8000a88 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000a42:	4613      	mov	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	4413      	add	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a52:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000a54:	88fa      	ldrh	r2, [r7, #6]
 8000a56:	490c      	ldr	r1, [pc, #48]	; (8000a88 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000a58:	4613      	mov	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	440b      	add	r3, r1
 8000a62:	3308      	adds	r3, #8
 8000a64:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <BSP_LCD_LayerDefaultInit+0xbc>)
 8000a66:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000a68:	88fa      	ldrh	r2, [r7, #6]
 8000a6a:	4907      	ldr	r1, [pc, #28]	; (8000a88 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	440b      	add	r3, r1
 8000a76:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	3740      	adds	r7, #64	; 0x40
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000b0 	.word	0x200000b0
 8000a88:	20000178 	.word	0x20000178
 8000a8c:	20000020 	.word	0x20000020

08000a90 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <BSP_LCD_SelectLayer+0x1c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000174 	.word	0x20000174

08000ab0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <BSP_LCD_SetTextColor+0x28>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4907      	ldr	r1, [pc, #28]	; (8000adc <BSP_LCD_SetTextColor+0x2c>)
 8000abe:	4613      	mov	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	20000174 	.word	0x20000174
 8000adc:	20000178 	.word	0x20000178

08000ae0 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <BSP_LCD_SetBackColor+0x2c>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4908      	ldr	r1, [pc, #32]	; (8000b10 <BSP_LCD_SetBackColor+0x30>)
 8000aee:	4613      	mov	r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	4413      	add	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	440b      	add	r3, r1
 8000af8:	3304      	adds	r3, #4
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000174 	.word	0x20000174
 8000b10:	20000178 	.word	0x20000178

08000b14 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <BSP_LCD_SetFont+0x2c>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4908      	ldr	r1, [pc, #32]	; (8000b44 <BSP_LCD_SetFont+0x30>)
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	601a      	str	r2, [r3, #0]
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000174 	.word	0x20000174
 8000b44:	20000178 	.word	0x20000178

08000b48 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <BSP_LCD_GetFont+0x24>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4907      	ldr	r1, [pc, #28]	; (8000b70 <BSP_LCD_GetFont+0x28>)
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3308      	adds	r3, #8
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000174 	.word	0x20000174
 8000b70:	20000178 	.word	0x20000178

08000b74 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	80bb      	strh	r3, [r7, #4]
 8000b82:	4613      	mov	r3, r2
 8000b84:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <BSP_LCD_DisplayChar+0x80>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	491b      	ldr	r1, [pc, #108]	; (8000bf8 <BSP_LCD_DisplayChar+0x84>)
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4413      	add	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	440b      	add	r3, r1
 8000b96:	3308      	adds	r3, #8
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	6819      	ldr	r1, [r3, #0]
 8000b9c:	78fb      	ldrb	r3, [r7, #3]
 8000b9e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <BSP_LCD_DisplayChar+0x80>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	4c14      	ldr	r4, [pc, #80]	; (8000bf8 <BSP_LCD_DisplayChar+0x84>)
 8000ba8:	4613      	mov	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4423      	add	r3, r4
 8000bb2:	3308      	adds	r3, #8
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000bb8:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <BSP_LCD_DisplayChar+0x80>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4c0d      	ldr	r4, [pc, #52]	; (8000bf8 <BSP_LCD_DisplayChar+0x84>)
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4423      	add	r3, r4
 8000bcc:	3308      	adds	r3, #8
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	889b      	ldrh	r3, [r3, #4]
 8000bd2:	3307      	adds	r3, #7
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	da00      	bge.n	8000bda <BSP_LCD_DisplayChar+0x66>
 8000bd8:	3307      	adds	r3, #7
 8000bda:	10db      	asrs	r3, r3, #3
 8000bdc:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000be0:	18ca      	adds	r2, r1, r3
 8000be2:	88b9      	ldrh	r1, [r7, #4]
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fa02 	bl	8000ff0 <DrawChar>
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	20000174 	.word	0x20000174
 8000bf8:	20000178 	.word	0x20000178

08000bfc <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000bfc:	b5b0      	push	{r4, r5, r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60ba      	str	r2, [r7, #8]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4603      	mov	r3, r0
 8000c08:	81fb      	strh	r3, [r7, #14]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	81bb      	strh	r3, [r7, #12]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8000c12:	2301      	movs	r3, #1
 8000c14:	83fb      	strh	r3, [r7, #30]
 8000c16:	2300      	movs	r3, #0
 8000c18:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8000c26:	e002      	b.n	8000c2e <BSP_LCD_DisplayStringAt+0x32>
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	617a      	str	r2, [r7, #20]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1f6      	bne.n	8000c28 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000c3a:	f7ff feb1 	bl	80009a0 <BSP_LCD_GetXSize>
 8000c3e:	4601      	mov	r1, r0
 8000c40:	4b50      	ldr	r3, [pc, #320]	; (8000d84 <BSP_LCD_DisplayStringAt+0x188>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4850      	ldr	r0, [pc, #320]	; (8000d88 <BSP_LCD_DisplayStringAt+0x18c>)
 8000c46:	4613      	mov	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	4413      	add	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4403      	add	r3, r0
 8000c50:	3308      	adds	r3, #8
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	889b      	ldrh	r3, [r3, #4]
 8000c56:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c5a:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d01c      	beq.n	8000c9c <BSP_LCD_DisplayStringAt+0xa0>
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	dc33      	bgt.n	8000cce <BSP_LCD_DisplayStringAt+0xd2>
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d002      	beq.n	8000c70 <BSP_LCD_DisplayStringAt+0x74>
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d019      	beq.n	8000ca2 <BSP_LCD_DisplayStringAt+0xa6>
 8000c6e:	e02e      	b.n	8000cce <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	1ad1      	subs	r1, r2, r3
 8000c76:	4b43      	ldr	r3, [pc, #268]	; (8000d84 <BSP_LCD_DisplayStringAt+0x188>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4843      	ldr	r0, [pc, #268]	; (8000d88 <BSP_LCD_DisplayStringAt+0x18c>)
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4403      	add	r3, r0
 8000c86:	3308      	adds	r3, #8
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	889b      	ldrh	r3, [r3, #4]
 8000c8c:	fb01 f303 	mul.w	r3, r1, r3
 8000c90:	085b      	lsrs	r3, r3, #1
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	89fb      	ldrh	r3, [r7, #14]
 8000c96:	4413      	add	r3, r2
 8000c98:	83fb      	strh	r3, [r7, #30]
      break;
 8000c9a:	e01b      	b.n	8000cd4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8000c9c:	89fb      	ldrh	r3, [r7, #14]
 8000c9e:	83fb      	strh	r3, [r7, #30]
      break;
 8000ca0:	e018      	b.n	8000cd4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	b299      	uxth	r1, r3
 8000caa:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <BSP_LCD_DisplayStringAt+0x188>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	4836      	ldr	r0, [pc, #216]	; (8000d88 <BSP_LCD_DisplayStringAt+0x18c>)
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4403      	add	r3, r0
 8000cba:	3308      	adds	r3, #8
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	889b      	ldrh	r3, [r3, #4]
 8000cc0:	fb11 f303 	smulbb	r3, r1, r3
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	83fb      	strh	r3, [r7, #30]
      break;
 8000ccc:	e002      	b.n	8000cd4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	83fb      	strh	r3, [r7, #30]
      break;
 8000cd2:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8000cd4:	8bfb      	ldrh	r3, [r7, #30]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <BSP_LCD_DisplayStringAt+0xe6>
 8000cda:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	da1d      	bge.n	8000d1e <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000ce6:	e01a      	b.n	8000d1e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	781a      	ldrb	r2, [r3, #0]
 8000cec:	89b9      	ldrh	r1, [r7, #12]
 8000cee:	8bfb      	ldrh	r3, [r7, #30]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff3f 	bl	8000b74 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000cf6:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <BSP_LCD_DisplayStringAt+0x188>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4923      	ldr	r1, [pc, #140]	; (8000d88 <BSP_LCD_DisplayStringAt+0x18c>)
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	440b      	add	r3, r1
 8000d06:	3308      	adds	r3, #8
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	889a      	ldrh	r2, [r3, #4]
 8000d0c:	8bfb      	ldrh	r3, [r7, #30]
 8000d0e:	4413      	add	r3, r2
 8000d10:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	3301      	adds	r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
    i++;
 8000d18:	8bbb      	ldrh	r3, [r7, #28]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	bf14      	ite	ne
 8000d26:	2301      	movne	r3, #1
 8000d28:	2300      	moveq	r3, #0
 8000d2a:	b2dc      	uxtb	r4, r3
 8000d2c:	f7ff fe38 	bl	80009a0 <BSP_LCD_GetXSize>
 8000d30:	8bb9      	ldrh	r1, [r7, #28]
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <BSP_LCD_DisplayStringAt+0x188>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4d14      	ldr	r5, [pc, #80]	; (8000d88 <BSP_LCD_DisplayStringAt+0x18c>)
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	442b      	add	r3, r5
 8000d42:	3308      	adds	r3, #8
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	889b      	ldrh	r3, [r3, #4]
 8000d48:	fb01 f303 	mul.w	r3, r1, r3
 8000d4c:	1ac3      	subs	r3, r0, r3
 8000d4e:	b299      	uxth	r1, r3
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <BSP_LCD_DisplayStringAt+0x188>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <BSP_LCD_DisplayStringAt+0x18c>)
 8000d56:	4613      	mov	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4403      	add	r3, r0
 8000d60:	3308      	adds	r3, #8
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	889b      	ldrh	r3, [r3, #4]
 8000d66:	4299      	cmp	r1, r3
 8000d68:	bf2c      	ite	cs
 8000d6a:	2301      	movcs	r3, #1
 8000d6c:	2300      	movcc	r3, #0
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	4023      	ands	r3, r4
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1b7      	bne.n	8000ce8 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3720      	adds	r7, #32
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bdb0      	pop	{r4, r5, r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000174 	.word	0x20000174
 8000d88:	20000178 	.word	0x20000178

08000d8c <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000d98:	f7ff fed6 	bl	8000b48 <BSP_LCD_GetFont>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	88db      	ldrh	r3, [r3, #6]
 8000da0:	88fa      	ldrh	r2, [r7, #6]
 8000da2:	fb12 f303 	smulbb	r3, r2, r3
 8000da6:	b299      	uxth	r1, r3
 8000da8:	2303      	movs	r3, #3
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff ff25 	bl	8000bfc <BSP_LCD_DisplayStringAt>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af02      	add	r7, sp, #8
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	4608      	mov	r0, r1
 8000dc8:	4611      	mov	r1, r2
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4623      	mov	r3, r4
 8000dce:	80fb      	strh	r3, [r7, #6]
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	80bb      	strh	r3, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	807b      	strh	r3, [r7, #2]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <BSP_LCD_FillRect+0xa8>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4920      	ldr	r1, [pc, #128]	; (8000e68 <BSP_LCD_FillRect+0xac>)
 8000de6:	4613      	mov	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4413      	add	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	440b      	add	r3, r1
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fe5c 	bl	8000ab0 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <BSP_LCD_FillRect+0xa8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <BSP_LCD_FillRect+0xb0>)
 8000dfe:	2134      	movs	r1, #52	; 0x34
 8000e00:	fb01 f303 	mul.w	r3, r1, r3
 8000e04:	4413      	add	r3, r2
 8000e06:	335c      	adds	r3, #92	; 0x5c
 8000e08:	681c      	ldr	r4, [r3, #0]
 8000e0a:	f7ff fdc9 	bl	80009a0 <BSP_LCD_GetXSize>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	fb03 f202 	mul.w	r2, r3, r2
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	4413      	add	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4423      	add	r3, r4
 8000e1e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <BSP_LCD_FillRect+0xa8>)
 8000e22:	681c      	ldr	r4, [r3, #0]
 8000e24:	68fd      	ldr	r5, [r7, #12]
 8000e26:	887e      	ldrh	r6, [r7, #2]
 8000e28:	f8b7 8000 	ldrh.w	r8, [r7]
 8000e2c:	f7ff fdb8 	bl	80009a0 <BSP_LCD_GetXSize>
 8000e30:	4602      	mov	r2, r0
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	1ad1      	subs	r1, r2, r3
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <BSP_LCD_FillRect+0xa8>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	480b      	ldr	r0, [pc, #44]	; (8000e68 <BSP_LCD_FillRect+0xac>)
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4403      	add	r3, r0
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	9301      	str	r3, [sp, #4]
 8000e4a:	9100      	str	r1, [sp, #0]
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	4632      	mov	r2, r6
 8000e50:	4629      	mov	r1, r5
 8000e52:	4620      	mov	r0, r4
 8000e54:	f000 f984 	bl	8001160 <LL_FillBuffer>
}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e62:	bf00      	nop
 8000e64:	20000174 	.word	0x20000174
 8000e68:	20000178 	.word	0x20000178
 8000e6c:	200000b0 	.word	0x200000b0

08000e70 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af02      	add	r7, sp, #8
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d80d      	bhi.n	8000e9c <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	2215      	movs	r2, #21
 8000e92:	2100      	movs	r1, #0
 8000e94:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <DSI_IO_WriteCmd+0x50>)
 8000e96:	f001 fea6 	bl	8002be6 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 8000e9a:	e00d      	b.n	8000eb8 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	9200      	str	r2, [sp, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2239      	movs	r2, #57	; 0x39
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <DSI_IO_WriteCmd+0x50>)
 8000eb4:	f001 feb9 	bl	8002c2a <HAL_DSI_LongWrite>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000158 	.word	0x20000158

08000ec4 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000ed4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	4a2d      	ldr	r2, [pc, #180]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000eec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ef0:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef6:	4a2a      	ldr	r2, [pc, #168]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000ef8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000efc:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a26      	ldr	r2, [pc, #152]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000f08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000f20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f24:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000f2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f30:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000f3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f52:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000f54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f58:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <BSP_LCD_MspInit+0xdc>)
 8000f60:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000f64:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2103      	movs	r1, #3
 8000f6a:	2058      	movs	r0, #88	; 0x58
 8000f6c:	f000 fcc3 	bl	80018f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000f70:	2058      	movs	r0, #88	; 0x58
 8000f72:	f000 fcdc 	bl	800192e <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2103      	movs	r1, #3
 8000f7a:	205a      	movs	r0, #90	; 0x5a
 8000f7c:	f000 fcbb 	bl	80018f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f80:	205a      	movs	r0, #90	; 0x5a
 8000f82:	f000 fcd4 	bl	800192e <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2103      	movs	r1, #3
 8000f8a:	205c      	movs	r0, #92	; 0x5c
 8000f8c:	f000 fcb3 	bl	80018f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000f90:	205c      	movs	r0, #92	; 0x5c
 8000f92:	f000 fccc 	bl	800192e <HAL_NVIC_EnableIRQ>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8000fa4:	b5b0      	push	{r4, r5, r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	603a      	str	r2, [r7, #0]
 8000fae:	80fb      	strh	r3, [r7, #6]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <BSP_LCD_DrawPixel+0x44>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <BSP_LCD_DrawPixel+0x48>)
 8000fba:	2134      	movs	r1, #52	; 0x34
 8000fbc:	fb01 f303 	mul.w	r3, r1, r3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	335c      	adds	r3, #92	; 0x5c
 8000fc4:	681c      	ldr	r4, [r3, #0]
 8000fc6:	88bd      	ldrh	r5, [r7, #4]
 8000fc8:	f7ff fcea 	bl	80009a0 <BSP_LCD_GetXSize>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	fb03 f205 	mul.w	r2, r3, r5
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4423      	add	r3, r4
 8000fda:	461a      	mov	r2, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe8:	20000174 	.word	0x20000174
 8000fec:	200000b0 	.word	0x200000b0

08000ff0 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	603a      	str	r2, [r7, #0]
 8000ffa:	80fb      	strh	r3, [r7, #6]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001008:	4b53      	ldr	r3, [pc, #332]	; (8001158 <DrawChar+0x168>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4953      	ldr	r1, [pc, #332]	; (800115c <DrawChar+0x16c>)
 800100e:	4613      	mov	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	3308      	adds	r3, #8
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	88db      	ldrh	r3, [r3, #6]
 800101e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001020:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <DrawChar+0x168>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	494d      	ldr	r1, [pc, #308]	; (800115c <DrawChar+0x16c>)
 8001026:	4613      	mov	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	3308      	adds	r3, #8
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001038:	8a3b      	ldrh	r3, [r7, #16]
 800103a:	3307      	adds	r3, #7
 800103c:	2b00      	cmp	r3, #0
 800103e:	da00      	bge.n	8001042 <DrawChar+0x52>
 8001040:	3307      	adds	r3, #7
 8001042:	10db      	asrs	r3, r3, #3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	b2da      	uxtb	r2, r3
 800104a:	8a3b      	ldrh	r3, [r7, #16]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e076      	b.n	8001146 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001058:	8a3b      	ldrh	r3, [r7, #16]
 800105a:	3307      	adds	r3, #7
 800105c:	2b00      	cmp	r3, #0
 800105e:	da00      	bge.n	8001062 <DrawChar+0x72>
 8001060:	3307      	adds	r3, #7
 8001062:	10db      	asrs	r3, r3, #3
 8001064:	461a      	mov	r2, r3
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fb02 f303 	mul.w	r3, r2, r3
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	4413      	add	r3, r2
 8001070:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001072:	8a3b      	ldrh	r3, [r7, #16]
 8001074:	3307      	adds	r3, #7
 8001076:	2b00      	cmp	r3, #0
 8001078:	da00      	bge.n	800107c <DrawChar+0x8c>
 800107a:	3307      	adds	r3, #7
 800107c:	10db      	asrs	r3, r3, #3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d002      	beq.n	8001088 <DrawChar+0x98>
 8001082:	2b02      	cmp	r3, #2
 8001084:	d004      	beq.n	8001090 <DrawChar+0xa0>
 8001086:	e00c      	b.n	80010a2 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	617b      	str	r3, [r7, #20]
      break;
 800108e:	e016      	b.n	80010be <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	3201      	adds	r2, #1
 800109a:	7812      	ldrb	r2, [r2, #0]
 800109c:	4313      	orrs	r3, r2
 800109e:	617b      	str	r3, [r7, #20]
      break;
 80010a0:	e00d      	b.n	80010be <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	041a      	lsls	r2, r3, #16
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	3301      	adds	r3, #1
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	4313      	orrs	r3, r2
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	3202      	adds	r2, #2
 80010b6:	7812      	ldrb	r2, [r2, #0]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]
      break;
 80010bc:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	e036      	b.n	8001132 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 80010c4:	8a3a      	ldrh	r2, [r7, #16]
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	1ad2      	subs	r2, r2, r3
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	4413      	add	r3, r2
 80010ce:	3b01      	subs	r3, #1
 80010d0:	2201      	movs	r2, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	4013      	ands	r3, r2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d012      	beq.n	8001106 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	4413      	add	r3, r2
 80010e8:	b298      	uxth	r0, r3
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <DrawChar+0x168>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	491b      	ldr	r1, [pc, #108]	; (800115c <DrawChar+0x16c>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	88bb      	ldrh	r3, [r7, #4]
 80010fe:	4619      	mov	r1, r3
 8001100:	f7ff ff50 	bl	8000fa4 <BSP_LCD_DrawPixel>
 8001104:	e012      	b.n	800112c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	b29a      	uxth	r2, r3
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	4413      	add	r3, r2
 800110e:	b298      	uxth	r0, r3
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <DrawChar+0x168>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4911      	ldr	r1, [pc, #68]	; (800115c <DrawChar+0x16c>)
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	3304      	adds	r3, #4
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	88bb      	ldrh	r3, [r7, #4]
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff ff3c 	bl	8000fa4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	3301      	adds	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	8a3b      	ldrh	r3, [r7, #16]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	429a      	cmp	r2, r3
 8001138:	d3c4      	bcc.n	80010c4 <DrawChar+0xd4>
      }
    }
    Ypos++;
 800113a:	88bb      	ldrh	r3, [r7, #4]
 800113c:	3301      	adds	r3, #1
 800113e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	3301      	adds	r3, #1
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	8a7b      	ldrh	r3, [r7, #18]
 8001148:	69fa      	ldr	r2, [r7, #28]
 800114a:	429a      	cmp	r2, r3
 800114c:	d384      	bcc.n	8001058 <DrawChar+0x68>
  }
}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000174 	.word	0x20000174
 800115c:	20000178 	.word	0x20000178

08001160 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af02      	add	r7, sp, #8
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <LL_FillBuffer+0x68>)
 8001170:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001174:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <LL_FillBuffer+0x68>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = OffLine;
 800117c:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <LL_FillBuffer+0x68>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	60d3      	str	r3, [r2, #12]

  hdma2d_eval.Instance = DMA2D;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <LL_FillBuffer+0x68>)
 8001184:	4a11      	ldr	r2, [pc, #68]	; (80011cc <LL_FillBuffer+0x6c>)
 8001186:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8001188:	480f      	ldr	r0, [pc, #60]	; (80011c8 <LL_FillBuffer+0x68>)
 800118a:	f000 fda9 	bl	8001ce0 <HAL_DMA2D_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d115      	bne.n	80011c0 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	480c      	ldr	r0, [pc, #48]	; (80011c8 <LL_FillBuffer+0x68>)
 8001198:	f000 ff0a 	bl	8001fb0 <HAL_DMA2D_ConfigLayer>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10e      	bne.n	80011c0 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69f9      	ldr	r1, [r7, #28]
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <LL_FillBuffer+0x68>)
 80011ae:	f000 fdea 	bl	8001d86 <HAL_DMA2D_Start>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 80011b8:	210a      	movs	r1, #10
 80011ba:	4803      	ldr	r0, [pc, #12]	; (80011c8 <LL_FillBuffer+0x68>)
 80011bc:	f000 fe0e 	bl	8001ddc <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000070 	.word	0x20000070
 80011cc:	4002b000 	.word	0x4002b000

080011d0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <BSP_SDRAM_Init+0xac>)
 80011d6:	4a2a      	ldr	r2, [pc, #168]	; (8001280 <BSP_SDRAM_Init+0xb0>)
 80011d8:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <BSP_SDRAM_Init+0xb4>)
 80011dc:	2202      	movs	r2, #2
 80011de:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <BSP_SDRAM_Init+0xb4>)
 80011e2:	2207      	movs	r2, #7
 80011e4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80011e6:	4b27      	ldr	r3, [pc, #156]	; (8001284 <BSP_SDRAM_Init+0xb4>)
 80011e8:	2204      	movs	r2, #4
 80011ea:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <BSP_SDRAM_Init+0xb4>)
 80011ee:	2207      	movs	r2, #7
 80011f0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80011f2:	4b24      	ldr	r3, [pc, #144]	; (8001284 <BSP_SDRAM_Init+0xb4>)
 80011f4:	2202      	movs	r2, #2
 80011f6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <BSP_SDRAM_Init+0xb4>)
 80011fa:	2202      	movs	r2, #2
 80011fc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <BSP_SDRAM_Init+0xb4>)
 8001200:	2202      	movs	r2, #2
 8001202:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <BSP_SDRAM_Init+0xac>)
 8001206:	2200      	movs	r2, #0
 8001208:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <BSP_SDRAM_Init+0xac>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <BSP_SDRAM_Init+0xac>)
 8001212:	2204      	movs	r2, #4
 8001214:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <BSP_SDRAM_Init+0xac>)
 8001218:	2220      	movs	r2, #32
 800121a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <BSP_SDRAM_Init+0xac>)
 800121e:	2240      	movs	r2, #64	; 0x40
 8001220:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <BSP_SDRAM_Init+0xac>)
 8001224:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001228:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <BSP_SDRAM_Init+0xac>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <BSP_SDRAM_Init+0xac>)
 8001232:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001236:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <BSP_SDRAM_Init+0xac>)
 800123a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800123e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <BSP_SDRAM_Init+0xac>)
 8001242:	2200      	movs	r2, #0
 8001244:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8001246:	2100      	movs	r1, #0
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <BSP_SDRAM_Init+0xac>)
 800124a:	f000 f87f 	bl	800134c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800124e:	490d      	ldr	r1, [pc, #52]	; (8001284 <BSP_SDRAM_Init+0xb4>)
 8001250:	480a      	ldr	r0, [pc, #40]	; (800127c <BSP_SDRAM_Init+0xac>)
 8001252:	f003 fa19 	bl	8004688 <HAL_SDRAM_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <BSP_SDRAM_Init+0xb8>)
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
 8001262:	e002      	b.n	800126a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <BSP_SDRAM_Init+0xb8>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800126a:	f240 5069 	movw	r0, #1385	; 0x569
 800126e:	f000 f80d 	bl	800128c <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <BSP_SDRAM_Init+0xb8>)
 8001274:	781b      	ldrb	r3, [r3, #0]
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000190 	.word	0x20000190
 8001280:	a0000140 	.word	0xa0000140
 8001284:	200001c4 	.word	0x200001c4
 8001288:	20000040 	.word	0x20000040

0800128c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80012a0:	2210      	movs	r2, #16
 80012a2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80012b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b4:	4923      	ldr	r1, [pc, #140]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80012b6:	4824      	ldr	r0, [pc, #144]	; (8001348 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80012b8:	f003 fa24 	bl	8004704 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80012bc:	2001      	movs	r0, #1
 80012be:	f000 fa1b 	bl	80016f8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80012ca:	2210      	movs	r2, #16
 80012cc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80012da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012de:	4919      	ldr	r1, [pc, #100]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80012e0:	4819      	ldr	r0, [pc, #100]	; (8001348 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80012e2:	f003 fa0f 	bl	8004704 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80012e8:	2203      	movs	r2, #3
 80012ea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80012ee:	2210      	movs	r2, #16
 80012f0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80012f4:	2208      	movs	r2, #8
 80012f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80012fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001302:	4910      	ldr	r1, [pc, #64]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001304:	4810      	ldr	r0, [pc, #64]	; (8001348 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001306:	f003 f9fd 	bl	8004704 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800130a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800130e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001312:	2204      	movs	r2, #4
 8001314:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001318:	2210      	movs	r2, #16
 800131a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800131e:	2201      	movs	r2, #1
 8001320:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001326:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132c:	4905      	ldr	r1, [pc, #20]	; (8001344 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001330:	f003 f9e8 	bl	8004704 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4804      	ldr	r0, [pc, #16]	; (8001348 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001338:	f003 fa19 	bl	800476e <HAL_SDRAM_ProgramRefreshRate>
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200001e0 	.word	0x200001e0
 8001348:	20000190 	.word	0x20000190

0800134c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b090      	sub	sp, #64	; 0x40
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 8104 	beq.w	8001566 <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
 8001362:	4b83      	ldr	r3, [pc, #524]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 8001364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001366:	4a82      	ldr	r2, [pc, #520]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6393      	str	r3, [r2, #56]	; 0x38
 800136e:	4b80      	ldr	r3, [pc, #512]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 8001370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
 8001378:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
 800137e:	4b7c      	ldr	r3, [pc, #496]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a7b      	ldr	r2, [pc, #492]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 8001384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b79      	ldr	r3, [pc, #484]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
 800139a:	4b75      	ldr	r3, [pc, #468]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a74      	ldr	r2, [pc, #464]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b72      	ldr	r3, [pc, #456]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	623b      	str	r3, [r7, #32]
 80013b0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	4b6e      	ldr	r3, [pc, #440]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a6d      	ldr	r2, [pc, #436]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b6b      	ldr	r3, [pc, #428]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
 80013d2:	4b67      	ldr	r3, [pc, #412]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a66      	ldr	r2, [pc, #408]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b64      	ldr	r3, [pc, #400]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	4b60      	ldr	r3, [pc, #384]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a5f      	ldr	r2, [pc, #380]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 80013f4:	f043 0320 	orr.w	r3, r3, #32
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b5d      	ldr	r3, [pc, #372]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0320 	and.w	r3, r3, #32
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b59      	ldr	r3, [pc, #356]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a58      	ldr	r2, [pc, #352]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 8001410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b56      	ldr	r3, [pc, #344]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b52      	ldr	r3, [pc, #328]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a51      	ldr	r2, [pc, #324]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 800142c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b4f      	ldr	r3, [pc, #316]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a4a      	ldr	r2, [pc, #296]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b48      	ldr	r3, [pc, #288]	; (8001570 <BSP_SDRAM_MspInit+0x224>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 800145e:	2301      	movs	r3, #1
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001462:	2302      	movs	r3, #2
 8001464:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001466:	230c      	movs	r3, #12
 8001468:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 800146a:	2301      	movs	r3, #1
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800146e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001472:	4619      	mov	r1, r3
 8001474:	483f      	ldr	r0, [pc, #252]	; (8001574 <BSP_SDRAM_MspInit+0x228>)
 8001476:	f001 fc71 	bl	8002d5c <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800147a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001484:	4619      	mov	r1, r3
 8001486:	483c      	ldr	r0, [pc, #240]	; (8001578 <BSP_SDRAM_MspInit+0x22c>)
 8001488:	f001 fc68 	bl	8002d5c <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800148c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001496:	4619      	mov	r1, r3
 8001498:	4838      	ldr	r0, [pc, #224]	; (800157c <BSP_SDRAM_MspInit+0x230>)
 800149a:	f001 fc5f 	bl	8002d5c <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800149e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80014a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a8:	4619      	mov	r1, r3
 80014aa:	4835      	ldr	r0, [pc, #212]	; (8001580 <BSP_SDRAM_MspInit+0x234>)
 80014ac:	f001 fc56 	bl	8002d5c <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80014b0:	f248 1333 	movw	r3, #33075	; 0x8133
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80014b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ba:	4619      	mov	r1, r3
 80014bc:	4831      	ldr	r0, [pc, #196]	; (8001584 <BSP_SDRAM_MspInit+0x238>)
 80014be:	f001 fc4d 	bl	8002d5c <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80014c2:	f64f 730c 	movw	r3, #65292	; 0xff0c
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80014c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014cc:	4619      	mov	r1, r3
 80014ce:	482e      	ldr	r0, [pc, #184]	; (8001588 <BSP_SDRAM_MspInit+0x23c>)
 80014d0:	f001 fc44 	bl	8002d5c <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80014d4:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80014da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014de:	4619      	mov	r1, r3
 80014e0:	482a      	ldr	r0, [pc, #168]	; (800158c <BSP_SDRAM_MspInit+0x240>)
 80014e2:	f001 fc3b 	bl	8002d5c <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80014f2:	4b27      	ldr	r3, [pc, #156]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 80014f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f8:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80014fa:	4b25      	ldr	r3, [pc, #148]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 80014fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001500:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001502:	4b23      	ldr	r3, [pc, #140]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 8001504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001508:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 800150c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001510:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 8001514:	2200      	movs	r2, #0
 8001516:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 800151a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800151e:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 8001528:	2203      	movs	r2, #3
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 800152e:	2200      	movs	r2, #0
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 8001534:	2200      	movs	r2, #0
 8001536:	631a      	str	r2, [r3, #48]	; 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 800153a:	4a16      	ldr	r2, [pc, #88]	; (8001594 <BSP_SDRAM_MspInit+0x248>)
 800153c:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a13      	ldr	r2, [pc, #76]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 8001542:	631a      	str	r2, [r3, #48]	; 0x30
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 800154a:	4811      	ldr	r0, [pc, #68]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 800154c:	f000 fab8 	bl	8001ac0 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 8001550:	480f      	ldr	r0, [pc, #60]	; (8001590 <BSP_SDRAM_MspInit+0x244>)
 8001552:	f000 fa07 	bl	8001964 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2105      	movs	r1, #5
 800155a:	2038      	movs	r0, #56	; 0x38
 800155c:	f000 f9cb 	bl	80018f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001560:	2038      	movs	r0, #56	; 0x38
 8001562:	f000 f9e4 	bl	800192e <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001566:	bf00      	nop
 8001568:	3740      	adds	r7, #64	; 0x40
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40020800 	.word	0x40020800
 8001578:	40020c00 	.word	0x40020c00
 800157c:	40021000 	.word	0x40021000
 8001580:	40021400 	.word	0x40021400
 8001584:	40021800 	.word	0x40021800
 8001588:	40021c00 	.word	0x40021c00
 800158c:	40022000 	.word	0x40022000
 8001590:	200001f0 	.word	0x200001f0
 8001594:	40026410 	.word	0x40026410

08001598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <SystemInit+0x60>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <SystemInit+0x60>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <SystemInit+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <SystemInit+0x64>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <SystemInit+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <SystemInit+0x64>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <SystemInit+0x64>)
 80015c4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80015c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <SystemInit+0x64>)
 80015d0:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <SystemInit+0x68>)
 80015d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <SystemInit+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a08      	ldr	r2, [pc, #32]	; (80015fc <SystemInit+0x64>)
 80015da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <SystemInit+0x64>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SystemInit+0x60>)
 80015e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ec:	609a      	str	r2, [r3, #8]
#endif
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00
 80015fc:	40023800 	.word	0x40023800
 8001600:	24003010 	.word	0x24003010

08001604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0d      	ldr	r2, [pc, #52]	; (8001644 <HAL_Init+0x40>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <HAL_Init+0x40>)
 800161a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_Init+0x40>)
 8001626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 f957 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001632:	200f      	movs	r0, #15
 8001634:	f000 f810 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001638:	f000 f806 	bl	8001648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023c00 	.word	0x40023c00

08001648 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f967 	bl	800194a <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f000 f92f 	bl	80018f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000044 	.word	0x20000044
 80016b0:	2000004c 	.word	0x2000004c
 80016b4:	20000048 	.word	0x20000048

080016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	2000004c 	.word	0x2000004c
 80016dc:	20000250 	.word	0x20000250

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000250 	.word	0x20000250

080016f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff ffee 	bl	80016e0 <HAL_GetTick>
 8001704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001710:	d005      	beq.n	800171e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_Delay+0x44>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800171e:	bf00      	nop
 8001720:	f7ff ffde 	bl	80016e0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8f7      	bhi.n	8001720 <HAL_Delay+0x28>
  {
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000004c 	.word	0x2000004c

08001740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800175c:	4013      	ands	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800176c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <__NVIC_GetPriorityGrouping+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0307 	and.w	r3, r3, #7
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db0b      	blt.n	80017ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	4907      	ldr	r1, [pc, #28]	; (80017dc <__NVIC_EnableIRQ+0x38>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	; (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ac:	d301      	bcc.n	80018b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00f      	b.n	80018d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <SysTick_Config+0x40>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ba:	210f      	movs	r1, #15
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f7ff ff8e 	bl	80017e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <SysTick_Config+0x40>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <SysTick_Config+0x40>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff29 	bl	8001740 <__NVIC_SetPriorityGrouping>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001908:	f7ff ff3e 	bl	8001788 <__NVIC_GetPriorityGrouping>
 800190c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff ff8e 	bl	8001834 <NVIC_EncodePriority>
 8001918:	4602      	mov	r2, r0
 800191a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5d 	bl	80017e0 <__NVIC_SetPriority>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff31 	bl	80017a4 <__NVIC_EnableIRQ>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffa2 	bl	800189c <SysTick_Config>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff feb6 	bl	80016e0 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e099      	b.n	8001ab4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a0:	e00f      	b.n	80019c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019a2:	f7ff fe9d 	bl	80016e0 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	d908      	bls.n	80019c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2220      	movs	r2, #32
 80019b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2203      	movs	r2, #3
 80019ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e078      	b.n	8001ab4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1e8      	bne.n	80019a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	4b38      	ldr	r3, [pc, #224]	; (8001abc <HAL_DMA_Init+0x158>)
 80019dc:	4013      	ands	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d107      	bne.n	8001a2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	4313      	orrs	r3, r2
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f023 0307 	bic.w	r3, r3, #7
 8001a42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d117      	bne.n	8001a86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00e      	beq.n	8001a86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f8bd 	bl	8001be8 <DMA_CheckFifoParam>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2240      	movs	r2, #64	; 0x40
 8001a78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a82:	2301      	movs	r3, #1
 8001a84:	e016      	b.n	8001ab4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f874 	bl	8001b7c <DMA_CalcBaseAndBitshift>
 8001a94:	4603      	mov	r3, r0
 8001a96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9c:	223f      	movs	r2, #63	; 0x3f
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	f010803f 	.word	0xf010803f

08001ac0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e050      	b.n	8001b74 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d101      	bne.n	8001ae2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e048      	b.n	8001b74 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0201 	bic.w	r2, r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2200      	movs	r2, #0
 8001b00:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2221      	movs	r2, #33	; 0x21
 8001b20:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f82a 	bl	8001b7c <DMA_CalcBaseAndBitshift>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b54:	223f      	movs	r2, #63	; 0x3f
 8001b56:	409a      	lsls	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	3b10      	subs	r3, #16
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <DMA_CalcBaseAndBitshift+0x64>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <DMA_CalcBaseAndBitshift+0x68>)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d909      	bls.n	8001bbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bb2:	f023 0303 	bic.w	r3, r3, #3
 8001bb6:	1d1a      	adds	r2, r3, #4
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	659a      	str	r2, [r3, #88]	; 0x58
 8001bbc:	e007      	b.n	8001bce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bc6:	f023 0303 	bic.w	r3, r3, #3
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	aaaaaaab 	.word	0xaaaaaaab
 8001be4:	0800874c 	.word	0x0800874c

08001be8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d11f      	bne.n	8001c42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d856      	bhi.n	8001cb6 <DMA_CheckFifoParam+0xce>
 8001c08:	a201      	add	r2, pc, #4	; (adr r2, 8001c10 <DMA_CheckFifoParam+0x28>)
 8001c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0e:	bf00      	nop
 8001c10:	08001c21 	.word	0x08001c21
 8001c14:	08001c33 	.word	0x08001c33
 8001c18:	08001c21 	.word	0x08001c21
 8001c1c:	08001cb7 	.word	0x08001cb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d046      	beq.n	8001cba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c30:	e043      	b.n	8001cba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c3a:	d140      	bne.n	8001cbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c40:	e03d      	b.n	8001cbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c4a:	d121      	bne.n	8001c90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d837      	bhi.n	8001cc2 <DMA_CheckFifoParam+0xda>
 8001c52:	a201      	add	r2, pc, #4	; (adr r2, 8001c58 <DMA_CheckFifoParam+0x70>)
 8001c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c58:	08001c69 	.word	0x08001c69
 8001c5c:	08001c6f 	.word	0x08001c6f
 8001c60:	08001c69 	.word	0x08001c69
 8001c64:	08001c81 	.word	0x08001c81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c6c:	e030      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d025      	beq.n	8001cc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c7e:	e022      	b.n	8001cc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c88:	d11f      	bne.n	8001cca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c8e:	e01c      	b.n	8001cca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d903      	bls.n	8001c9e <DMA_CheckFifoParam+0xb6>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d003      	beq.n	8001ca4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c9c:	e018      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ca2:	e015      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00e      	beq.n	8001cce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cb4:	e00b      	b.n	8001cce <DMA_CheckFifoParam+0xe6>
      break;
 8001cb6:	bf00      	nop
 8001cb8:	e00a      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cba:	bf00      	nop
 8001cbc:	e008      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cbe:	bf00      	nop
 8001cc0:	e006      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cc2:	bf00      	nop
 8001cc4:	e004      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cc6:	bf00      	nop
 8001cc8:	e002      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cca:	bf00      	nop
 8001ccc:	e000      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cce:	bf00      	nop
    }
  } 
  
  return status; 
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop

08001ce0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e03b      	b.n	8001d6a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f833 	bl	8001d72 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d30:	f023 0107 	bic.w	r1, r3, #7
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68d1      	ldr	r1, [r2, #12]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	430b      	orrs	r3, r1
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af02      	add	r7, sp, #8
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_DMA2D_Start+0x1c>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e018      	b.n	8001dd4 <HAL_DMA2D_Start+0x4e>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2202      	movs	r2, #2
 8001dae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 f989 	bl	80020d4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0201 	orr.w	r2, r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d056      	beq.n	8001ea6 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001df8:	f7ff fc72 	bl	80016e0 <HAL_GetTick>
 8001dfc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001dfe:	e04b      	b.n	8001e98 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d023      	beq.n	8001e5a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e20:	f043 0202 	orr.w	r2, r3, #2
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	f043 0201 	orr.w	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2221      	movs	r2, #33	; 0x21
 8001e44:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2204      	movs	r2, #4
 8001e4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0a5      	b.n	8001fa6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e60:	d01a      	beq.n	8001e98 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e62:	f7ff fc3d 	bl	80016e0 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d302      	bcc.n	8001e78 <HAL_DMA2D_PollForTransfer+0x9c>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10f      	bne.n	8001e98 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	f043 0220 	orr.w	r2, r3, #32
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2203      	movs	r2, #3
 8001e88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e086      	b.n	8001fa6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0ac      	beq.n	8001e00 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d061      	beq.n	8001f8c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ec8:	f7ff fc0a 	bl	80016e0 <HAL_GetTick>
 8001ecc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001ece:	e056      	b.n	8001f7e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d02e      	beq.n	8001f40 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	f043 0204 	orr.w	r2, r3, #4
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f06:	f043 0202 	orr.w	r2, r3, #2
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2229      	movs	r2, #41	; 0x29
 8001f2a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e032      	b.n	8001fa6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f46:	d01a      	beq.n	8001f7e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f48:	f7ff fbca 	bl	80016e0 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d302      	bcc.n	8001f5e <HAL_DMA2D_PollForTransfer+0x182>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10f      	bne.n	8001f7e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	f043 0220 	orr.w	r2, r3, #32
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e013      	b.n	8001fa6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0a1      	beq.n	8001ed0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2212      	movs	r2, #18
 8001f92:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_DMA2D_ConfigLayer+0x20>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e079      	b.n	80020c4 <HAL_DMA2D_ConfigLayer+0x114>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	3318      	adds	r3, #24
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	041b      	lsls	r3, r3, #16
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001ffa:	4b35      	ldr	r3, [pc, #212]	; (80020d0 <HAL_DMA2D_ConfigLayer+0x120>)
 8001ffc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b0a      	cmp	r3, #10
 8002004:	d003      	beq.n	800200e <HAL_DMA2D_ConfigLayer+0x5e>
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b09      	cmp	r3, #9
 800200c:	d107      	bne.n	800201e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	e005      	b.n	800202a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	061b      	lsls	r3, r3, #24
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	4313      	orrs	r3, r2
 8002028:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d120      	bne.n	8002072 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	43db      	mvns	r3, r3
 800203a:	ea02 0103 	and.w	r1, r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	430a      	orrs	r2, r1
 8002046:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b0a      	cmp	r3, #10
 8002058:	d003      	beq.n	8002062 <HAL_DMA2D_ConfigLayer+0xb2>
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b09      	cmp	r3, #9
 8002060:	d127      	bne.n	80020b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800206e:	629a      	str	r2, [r3, #40]	; 0x28
 8002070:	e01f      	b.n	80020b2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69da      	ldr	r2, [r3, #28]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	ea02 0103 	and.w	r1, r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	430a      	orrs	r2, r1
 8002088:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b0a      	cmp	r3, #10
 800209a:	d003      	beq.n	80020a4 <HAL_DMA2D_ConfigLayer+0xf4>
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b09      	cmp	r3, #9
 80020a2:	d106      	bne.n	80020b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80020b0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	371c      	adds	r7, #28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	ff03000f 	.word	0xff03000f

080020d4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b08b      	sub	sp, #44	; 0x2c
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	041a      	lsls	r2, r3, #16
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f2:	431a      	orrs	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800210c:	d174      	bne.n	80021f8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002114:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800211c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002124:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d108      	bne.n	8002146 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	431a      	orrs	r2, r3
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	4313      	orrs	r3, r2
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4313      	orrs	r3, r2
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
 8002144:	e053      	b.n	80021ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d106      	bne.n	800215c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	4313      	orrs	r3, r2
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	4313      	orrs	r3, r2
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	e048      	b.n	80021ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d111      	bne.n	8002188 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	0cdb      	lsrs	r3, r3, #19
 8002168:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	0a9b      	lsrs	r3, r3, #10
 800216e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	08db      	lsrs	r3, r3, #3
 8002174:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	02db      	lsls	r3, r3, #11
 800217e:	4313      	orrs	r3, r2
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	4313      	orrs	r3, r2
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
 8002186:	e032      	b.n	80021ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d117      	bne.n	80021c0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	0fdb      	lsrs	r3, r3, #31
 8002194:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	0cdb      	lsrs	r3, r3, #19
 800219a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	0adb      	lsrs	r3, r3, #11
 80021a0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	08db      	lsrs	r3, r3, #3
 80021a6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	029b      	lsls	r3, r3, #10
 80021b0:	431a      	orrs	r2, r3
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	03db      	lsls	r3, r3, #15
 80021b6:	4313      	orrs	r3, r2
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	e016      	b.n	80021ee <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	0f1b      	lsrs	r3, r3, #28
 80021c4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	0d1b      	lsrs	r3, r3, #20
 80021ca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	0b1b      	lsrs	r3, r3, #12
 80021d0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	011a      	lsls	r2, r3, #4
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	431a      	orrs	r2, r3
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	031b      	lsls	r3, r3, #12
 80021e6:	4313      	orrs	r3, r2
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80021f6:	e003      	b.n	8002200 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	60da      	str	r2, [r3, #12]
}
 8002200:	bf00      	nop
 8002202:	372c      	adds	r7, #44	; 0x2c
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	019a      	lsls	r2, r3, #6
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	431a      	orrs	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	431a      	orrs	r2, r3
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	041b      	lsls	r3, r3, #16
 800222c:	431a      	orrs	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800224c:	f7ff fa48 	bl	80016e0 <HAL_GetTick>
 8002250:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002252:	e009      	b.n	8002268 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002254:	f7ff fa44 	bl	80016e0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002262:	d901      	bls.n	8002268 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e015      	b.n	8002294 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0ee      	beq.n	8002254 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	019a      	lsls	r2, r3, #6
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	431a      	orrs	r2, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	ea42 0103 	orr.w	r1, r2, r3
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	041a      	lsls	r2, r3, #16
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e10b      	b.n	80024c8 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7c5b      	ldrb	r3, [r3, #17]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f97e 	bl	80025bc <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80022da:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80022e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ee:	f7ff f9f7 	bl	80016e0 <HAL_GetTick>
 80022f2:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80022f4:	e009      	b.n	800230a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80022f6:	f7ff f9f3 	bl	80016e0 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002304:	d901      	bls.n	800230a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e0de      	b.n	80024c8 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0ed      	beq.n	80022f6 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800232a:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800232e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002346:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800234e:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002382:	2001      	movs	r0, #1
 8002384:	f7ff f9b8 	bl	80016f8 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002388:	f7ff f9aa 	bl	80016e0 <HAL_GetTick>
 800238c:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800238e:	e009      	b.n	80023a4 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002390:	f7ff f9a6 	bl	80016e0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800239e:	d901      	bls.n	80023a4 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e091      	b.n	80024c8 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0ed      	beq.n	8002390 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0206 	orr.w	r2, r2, #6
 80023c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0203 	bic.w	r2, r2, #3
 80023d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0203 	bic.w	r2, r2, #3
 8002406:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800242e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6899      	ldr	r1, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_DSI_Init+0x1b4>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	e000      	b.n	8002452 <HAL_DSI_Init+0x1b6>
 8002450:	2301      	movs	r3, #1
 8002452:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <HAL_DSI_Init+0x234>)
 8002458:	fb03 f202 	mul.w	r2, r3, r2
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	409a      	lsls	r2, r3
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002488:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	430a      	orrs	r2, r1
 800249c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	003d0900 	.word	0x003d0900

080024d4 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e066      	b.n	80025b4 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2203      	movs	r2, #3
 80024ea:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0208 	bic.w	r2, r2, #8
 8002500:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0206 	bic.w	r2, r2, #6
 8002546:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002586:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f818 	bl	80025d0 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00f      	beq.n	800261c <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2201      	movs	r2, #1
 8002612:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f8ad 	bl	8002776 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00f      	beq.n	800264c <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2202      	movs	r2, #2
 8002642:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f002 fa9c 	bl	8004b84 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 808c 	beq.w	800276e <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800265e:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4013      	ands	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002676:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	4013      	ands	r3, r2
 8002684:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f043 0202 	orr.w	r2, r3, #2
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f043 0204 	orr.w	r2, r3, #4
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f043 0208 	orr.w	r2, r3, #8
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f043 0210 	orr.w	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f043 0220 	orr.w	r2, r3, #32
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f80e 	bl	800278a <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7c1b      	ldrb	r3, [r3, #16]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e0c5      	b.n	8002940 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0201 	orr.w	r2, r2, #1
 80027c8:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0201 	bic.w	r2, r2, #1
 80027da:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0203 	bic.w	r2, r2, #3
 8002800:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68d9      	ldr	r1, [r3, #12]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0207 	bic.w	r2, r2, #7
 8002822:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6959      	ldr	r1, [r3, #20]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	69da      	ldr	r2, [r3, #28]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	431a      	orrs	r2, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 020f 	bic.w	r2, r2, #15
 8002850:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6919      	ldr	r1, [r3, #16]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 020e 	bic.w	r2, r2, #14
 8002874:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	005a      	lsls	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	0c1b      	lsrs	r3, r3, #16
 800289c:	041b      	lsls	r3, r3, #16
 800289e:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80028c2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0202 	orr.w	r2, r2, #2
 8002934:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7c1b      	ldrb	r3, [r3, #16]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_DSI_ConfigCommand+0x16>
 800295e:	2302      	movs	r3, #2
 8002960:	e049      	b.n	80029f6 <HAL_DSI_ConfigCommand+0xaa>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_DSI_ConfigCommand+0xb8>)
 8002974:	400b      	ands	r3, r1
 8002976:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002986:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 800298c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8002992:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8002998:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800299e:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80029a4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80029aa:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80029b0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80029b6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80029bc:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80029c2:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0202 	bic.w	r2, r2, #2
 80029da:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	fef080ff 	.word	0xfef080ff

08002a08 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	7c1b      	ldrb	r3, [r3, #16]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_DSI_ConfigFlowControl+0x16>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e016      	b.n	8002a4c <HAL_DSI_ConfigFlowControl+0x44>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 021f 	bic.w	r2, r2, #31
 8002a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	7c1b      	ldrb	r3, [r3, #16]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_DSI_ConfigPhyTimer+0x16>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e058      	b.n	8002b20 <HAL_DSI_ConfigPhyTimer+0xc8>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	bf38      	it	cc
 8002a80:	4613      	movcc	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8002a94:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	041a      	lsls	r2, r3, #16
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002ac2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	041b      	lsls	r3, r3, #16
 8002ad8:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002afc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	021a      	lsls	r2, r3, #8
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7c1b      	ldrb	r3, [r3, #16]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_DSI_Start+0x14>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e02b      	b.n	8002b98 <HAL_DSI_Start+0x6c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0201 	orr.w	r2, r2, #1
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0208 	orr.w	r2, r2, #8
 8002b7c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_DSI_Refresh>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7c1b      	ldrb	r3, [r3, #16]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_DSI_Refresh+0x14>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e010      	b.n	8002bda <HAL_DSI_Refresh+0x36>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	741a      	strb	r2, [r3, #16]

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0204 	orr.w	r2, r2, #4
 8002bce:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b088      	sub	sp, #32
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	7c1b      	ldrb	r3, [r3, #16]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_DSI_ShortWrite+0x1a>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e010      	b.n	8002c22 <HAL_DSI_ShortWrite+0x3c>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f7ff fb14 	bl	800223e <DSI_ShortWrite>
 8002c16:	4603      	mov	r3, r0
 8002c18:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	741a      	strb	r2, [r3, #16]

  return status;
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b08c      	sub	sp, #48	; 0x30
 8002c2e:	af02      	add	r7, sp, #8
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8002c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3a:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	7c1b      	ldrb	r3, [r3, #16]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_DSI_LongWrite+0x1e>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e084      	b.n	8002d52 <HAL_DSI_LongWrite+0x128>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c4e:	f7fe fd47 	bl	80016e0 <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002c54:	e00c      	b.n	8002c70 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002c56:	f7fe fd43 	bl	80016e0 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c64:	d904      	bls.n	8002c70 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e070      	b.n	8002d52 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0eb      	beq.n	8002c56 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	bf28      	it	cs
 8002c88:	2303      	movcs	r3, #3
 8002c8a:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	623b      	str	r3, [r7, #32]
 8002c90:	e00f      	b.n	8002cb2 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	4413      	add	r3, r2
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	6a3a      	ldr	r2, [r7, #32]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d3eb      	bcc.n	8002c92 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4413      	add	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8002cd2:	e028      	b.n	8002d26 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	bf28      	it	cs
 8002cda:	2304      	movcs	r3, #4
 8002cdc:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	623b      	str	r3, [r7, #32]
 8002ce6:	e00e      	b.n	8002d06 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	4413      	add	r3, r2
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	3301      	adds	r3, #1
 8002d04:	623b      	str	r3, [r7, #32]
 8002d06:	6a3a      	ldr	r2, [r7, #32]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d3ec      	bcc.n	8002ce8 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8002d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1d3      	bne.n	8002cd4 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002d34:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	f7ff fa61 	bl	800220c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3728      	adds	r7, #40	; 0x28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	; 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	e177      	b.n	8003068 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d78:	2201      	movs	r2, #1
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	f040 8166 	bne.w	8003062 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d005      	beq.n	8002dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d130      	bne.n	8002e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	2203      	movs	r2, #3
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002de4:	2201      	movs	r2, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 0201 	and.w	r2, r3, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d017      	beq.n	8002e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	2203      	movs	r2, #3
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d123      	bne.n	8002ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	08da      	lsrs	r2, r3, #3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3208      	adds	r2, #8
 8002e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	220f      	movs	r2, #15
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	08da      	lsrs	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3208      	adds	r2, #8
 8002e9a:	69b9      	ldr	r1, [r7, #24]
 8002e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	2203      	movs	r2, #3
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0203 	and.w	r2, r3, #3
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80c0 	beq.w	8003062 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	4b66      	ldr	r3, [pc, #408]	; (8003080 <HAL_GPIO_Init+0x324>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	4a65      	ldr	r2, [pc, #404]	; (8003080 <HAL_GPIO_Init+0x324>)
 8002eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef2:	4b63      	ldr	r3, [pc, #396]	; (8003080 <HAL_GPIO_Init+0x324>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002efe:	4a61      	ldr	r2, [pc, #388]	; (8003084 <HAL_GPIO_Init+0x328>)
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	3302      	adds	r3, #2
 8002f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	220f      	movs	r2, #15
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a58      	ldr	r2, [pc, #352]	; (8003088 <HAL_GPIO_Init+0x32c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d037      	beq.n	8002f9a <HAL_GPIO_Init+0x23e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a57      	ldr	r2, [pc, #348]	; (800308c <HAL_GPIO_Init+0x330>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d031      	beq.n	8002f96 <HAL_GPIO_Init+0x23a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a56      	ldr	r2, [pc, #344]	; (8003090 <HAL_GPIO_Init+0x334>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d02b      	beq.n	8002f92 <HAL_GPIO_Init+0x236>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a55      	ldr	r2, [pc, #340]	; (8003094 <HAL_GPIO_Init+0x338>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d025      	beq.n	8002f8e <HAL_GPIO_Init+0x232>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a54      	ldr	r2, [pc, #336]	; (8003098 <HAL_GPIO_Init+0x33c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01f      	beq.n	8002f8a <HAL_GPIO_Init+0x22e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a53      	ldr	r2, [pc, #332]	; (800309c <HAL_GPIO_Init+0x340>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d019      	beq.n	8002f86 <HAL_GPIO_Init+0x22a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <HAL_GPIO_Init+0x344>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d013      	beq.n	8002f82 <HAL_GPIO_Init+0x226>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a51      	ldr	r2, [pc, #324]	; (80030a4 <HAL_GPIO_Init+0x348>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00d      	beq.n	8002f7e <HAL_GPIO_Init+0x222>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a50      	ldr	r2, [pc, #320]	; (80030a8 <HAL_GPIO_Init+0x34c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <HAL_GPIO_Init+0x21e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4f      	ldr	r2, [pc, #316]	; (80030ac <HAL_GPIO_Init+0x350>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_GPIO_Init+0x21a>
 8002f72:	2309      	movs	r3, #9
 8002f74:	e012      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f76:	230a      	movs	r3, #10
 8002f78:	e010      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	e00e      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f7e:	2307      	movs	r3, #7
 8002f80:	e00c      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f82:	2306      	movs	r3, #6
 8002f84:	e00a      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f86:	2305      	movs	r3, #5
 8002f88:	e008      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e004      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e002      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	f002 0203 	and.w	r2, r2, #3
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	4093      	lsls	r3, r2
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fac:	4935      	ldr	r1, [pc, #212]	; (8003084 <HAL_GPIO_Init+0x328>)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fba:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <HAL_GPIO_Init+0x354>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fde:	4a34      	ldr	r2, [pc, #208]	; (80030b0 <HAL_GPIO_Init+0x354>)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe4:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <HAL_GPIO_Init+0x354>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003008:	4a29      	ldr	r2, [pc, #164]	; (80030b0 <HAL_GPIO_Init+0x354>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800300e:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <HAL_GPIO_Init+0x354>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003032:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <HAL_GPIO_Init+0x354>)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003038:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <HAL_GPIO_Init+0x354>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800305c:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <HAL_GPIO_Init+0x354>)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3301      	adds	r3, #1
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b0f      	cmp	r3, #15
 800306c:	f67f ae84 	bls.w	8002d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3724      	adds	r7, #36	; 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	40013800 	.word	0x40013800
 8003088:	40020000 	.word	0x40020000
 800308c:	40020400 	.word	0x40020400
 8003090:	40020800 	.word	0x40020800
 8003094:	40020c00 	.word	0x40020c00
 8003098:	40021000 	.word	0x40021000
 800309c:	40021400 	.word	0x40021400
 80030a0:	40021800 	.word	0x40021800
 80030a4:	40021c00 	.word	0x40021c00
 80030a8:	40022000 	.word	0x40022000
 80030ac:	40022400 	.word	0x40022400
 80030b0:	40013c00 	.word	0x40013c00

080030b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	807b      	strh	r3, [r7, #2]
 80030c0:	4613      	mov	r3, r2
 80030c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030c4:	787b      	ldrb	r3, [r7, #1]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030d0:	e003      	b.n	80030da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	041a      	lsls	r2, r3, #16
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	619a      	str	r2, [r3, #24]
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0bf      	b.n	800327a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f911 	bl	8003336 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800312a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6999      	ldr	r1, [r3, #24]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003140:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6899      	ldr	r1, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b4a      	ldr	r3, [pc, #296]	; (8003284 <HAL_LTDC_Init+0x19c>)
 800315c:	400b      	ands	r3, r1
 800315e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68d9      	ldr	r1, [r3, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b3e      	ldr	r3, [pc, #248]	; (8003284 <HAL_LTDC_Init+0x19c>)
 800318a:	400b      	ands	r3, r1
 800318c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	041b      	lsls	r3, r3, #16
 8003194:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68d9      	ldr	r1, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6919      	ldr	r1, [r3, #16]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b33      	ldr	r3, [pc, #204]	; (8003284 <HAL_LTDC_Init+0x19c>)
 80031b8:	400b      	ands	r3, r1
 80031ba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	041b      	lsls	r3, r3, #16
 80031c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6919      	ldr	r1, [r3, #16]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6959      	ldr	r1, [r3, #20]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4b27      	ldr	r3, [pc, #156]	; (8003284 <HAL_LTDC_Init+0x19c>)
 80031e6:	400b      	ands	r3, r1
 80031e8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	041b      	lsls	r3, r3, #16
 80031f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6959      	ldr	r1, [r3, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003218:	041b      	lsls	r3, r3, #16
 800321a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0206 	orr.w	r2, r2, #6
 8003256:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	f000f800 	.word	0xf000f800

08003288 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_LTDC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e049      	b.n	800332e <HAL_LTDC_DeInit+0xa6>

  /* Check function parameters */
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));

  /* Disable LTDC Layer 1 */
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_1);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3384      	adds	r3, #132	; 0x84
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	3284      	adds	r2, #132	; 0x84
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	6013      	str	r3, [r2, #0]

#if defined(LTDC_Layer2_BASE)
  /* Disable LTDC Layer 2 */
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_2);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	f502 7282 	add.w	r2, r2, #260	; 0x104
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6013      	str	r3, [r2, #0]
#endif /* LTDC_Layer2_BASE */

  /* Reload during vertical blanking period */
  __HAL_LTDC_VERTICAL_BLANKING_RELOAD_CONFIG(hltdc);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0202 	orr.w	r2, r2, #2
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d6:	f7fe fa03 	bl	80016e0 <HAL_GetTick>
 80032da:	60f8      	str	r0, [r7, #12]

  /* Wait for VSYNC Interrupt */
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
 80032dc:	e006      	b.n	80032ec <HAL_LTDC_DeInit+0x64>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > LTDC_TIMEOUT_VALUE)
 80032de:	f7fe f9ff 	bl	80016e0 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b64      	cmp	r3, #100	; 0x64
 80032ea:	d807      	bhi.n	80032fc <HAL_LTDC_DeInit+0x74>
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f1      	beq.n	80032de <HAL_LTDC_DeInit+0x56>
 80032fa:	e000      	b.n	80032fe <HAL_LTDC_DeInit+0x76>
    {
      break;
 80032fc:	bf00      	nop
    }
  }

  /* Disable LTDC  */
  __HAL_LTDC_DISABLE(hltdc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	699a      	ldr	r2, [r3, #24]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0201 	bic.w	r2, r2, #1
 800330c:	619a      	str	r2, [r3, #24]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f81b 	bl	800334a <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_LTDC_MspDeInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003374:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d023      	beq.n	80033c8 <HAL_LTDC_IRQHandler+0x6a>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01e      	beq.n	80033c8 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0204 	bic.w	r2, r2, #4
 8003398:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2204      	movs	r2, #4
 80033a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033a8:	f043 0201 	orr.w	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2204      	movs	r2, #4
 80033b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f86f 	bl	80034a6 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d023      	beq.n	800341a <HAL_LTDC_IRQHandler+0xbc>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01e      	beq.n	800341a <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0202 	bic.w	r2, r2, #2
 80033ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2202      	movs	r2, #2
 80033f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033fa:	f043 0202 	orr.w	r2, r3, #2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2204      	movs	r2, #4
 8003408:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f846 	bl	80034a6 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01b      	beq.n	800345c <HAL_LTDC_IRQHandler+0xfe>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d016      	beq.n	800345c <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2201      	movs	r2, #1
 8003444:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f82f 	bl	80034ba <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d01b      	beq.n	800349e <HAL_LTDC_IRQHandler+0x140>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d016      	beq.n	800349e <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0208 	bic.w	r2, r2, #8
 800347e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2208      	movs	r2, #8
 8003486:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f818 	bl	80034ce <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80034e2:	b5b0      	push	{r4, r5, r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_LTDC_ConfigLayer+0x1a>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e02c      	b.n	8003556 <HAL_LTDC_ConfigLayer+0x74>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2134      	movs	r1, #52	; 0x34
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4614      	mov	r4, r2
 8003520:	461d      	mov	r5, r3
 8003522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800352a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800352c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800352e:	682b      	ldr	r3, [r5, #0]
 8003530:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f811 	bl	800355e <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2201      	movs	r2, #1
 8003542:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bdb0      	pop	{r4, r5, r7, pc}

0800355e <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800355e:	b480      	push	{r7}
 8003560:	b089      	sub	sp, #36	; 0x24
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357a:	4413      	add	r3, r2
 800357c:	041b      	lsls	r3, r3, #16
 800357e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	01db      	lsls	r3, r3, #7
 800358a:	4413      	add	r3, r2
 800358c:	3384      	adds	r3, #132	; 0x84
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	4611      	mov	r1, r2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	01d2      	lsls	r2, r2, #7
 800359a:	440a      	add	r2, r1
 800359c:	3284      	adds	r2, #132	; 0x84
 800359e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80035a2:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	0c1b      	lsrs	r3, r3, #16
 80035b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80035b4:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80035b6:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4619      	mov	r1, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	01db      	lsls	r3, r3, #7
 80035c2:	440b      	add	r3, r1
 80035c4:	3384      	adds	r3, #132	; 0x84
 80035c6:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80035cc:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035dc:	4413      	add	r3, r2
 80035de:	041b      	lsls	r3, r3, #16
 80035e0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	01db      	lsls	r3, r3, #7
 80035ec:	4413      	add	r3, r2
 80035ee:	3384      	adds	r3, #132	; 0x84
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	4611      	mov	r1, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	01d2      	lsls	r2, r2, #7
 80035fc:	440a      	add	r2, r1
 80035fe:	3284      	adds	r2, #132	; 0x84
 8003600:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003604:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003614:	4413      	add	r3, r2
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4619      	mov	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	01db      	lsls	r3, r3, #7
 8003622:	440b      	add	r3, r1
 8003624:	3384      	adds	r3, #132	; 0x84
 8003626:	4619      	mov	r1, r3
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	01db      	lsls	r3, r3, #7
 8003638:	4413      	add	r3, r2
 800363a:	3384      	adds	r3, #132	; 0x84
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	4611      	mov	r1, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	01d2      	lsls	r2, r2, #7
 8003648:	440a      	add	r2, r1
 800364a:	3284      	adds	r2, #132	; 0x84
 800364c:	f023 0307 	bic.w	r3, r3, #7
 8003650:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	01db      	lsls	r3, r3, #7
 800365c:	4413      	add	r3, r2
 800365e:	3384      	adds	r3, #132	; 0x84
 8003660:	461a      	mov	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003678:	041b      	lsls	r3, r3, #16
 800367a:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	061b      	lsls	r3, r3, #24
 8003682:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	01db      	lsls	r3, r3, #7
 800368e:	4413      	add	r3, r2
 8003690:	3384      	adds	r3, #132	; 0x84
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	01db      	lsls	r3, r3, #7
 800369e:	4413      	add	r3, r2
 80036a0:	3384      	adds	r3, #132	; 0x84
 80036a2:	461a      	mov	r2, r3
 80036a4:	2300      	movs	r3, #0
 80036a6:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036ae:	461a      	mov	r2, r3
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4619      	mov	r1, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	01db      	lsls	r3, r3, #7
 80036c2:	440b      	add	r3, r1
 80036c4:	3384      	adds	r3, #132	; 0x84
 80036c6:	4619      	mov	r1, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	01db      	lsls	r3, r3, #7
 80036d8:	4413      	add	r3, r2
 80036da:	3384      	adds	r3, #132	; 0x84
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	4611      	mov	r1, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	01d2      	lsls	r2, r2, #7
 80036e8:	440a      	add	r2, r1
 80036ea:	3284      	adds	r2, #132	; 0x84
 80036ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036f0:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	01db      	lsls	r3, r3, #7
 80036fc:	4413      	add	r3, r2
 80036fe:	3384      	adds	r3, #132	; 0x84
 8003700:	461a      	mov	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	01db      	lsls	r3, r3, #7
 8003712:	4413      	add	r3, r2
 8003714:	3384      	adds	r3, #132	; 0x84
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	4611      	mov	r1, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	01d2      	lsls	r2, r2, #7
 8003722:	440a      	add	r2, r1
 8003724:	3284      	adds	r2, #132	; 0x84
 8003726:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800372a:	f023 0307 	bic.w	r3, r3, #7
 800372e:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	68f9      	ldr	r1, [r7, #12]
 800373a:	6809      	ldr	r1, [r1, #0]
 800373c:	4608      	mov	r0, r1
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	01c9      	lsls	r1, r1, #7
 8003742:	4401      	add	r1, r0
 8003744:	3184      	adds	r1, #132	; 0x84
 8003746:	4313      	orrs	r3, r2
 8003748:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	01db      	lsls	r3, r3, #7
 8003754:	4413      	add	r3, r2
 8003756:	3384      	adds	r3, #132	; 0x84
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	01db      	lsls	r3, r3, #7
 8003764:	4413      	add	r3, r2
 8003766:	3384      	adds	r3, #132	; 0x84
 8003768:	461a      	mov	r2, r3
 800376a:	2300      	movs	r3, #0
 800376c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	01db      	lsls	r3, r3, #7
 8003778:	4413      	add	r3, r2
 800377a:	3384      	adds	r3, #132	; 0x84
 800377c:	461a      	mov	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800378c:	2304      	movs	r3, #4
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	e01b      	b.n	80037ca <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d102      	bne.n	80037a0 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800379a:	2303      	movs	r3, #3
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	e014      	b.n	80037ca <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d00b      	beq.n	80037c0 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d007      	beq.n	80037c0 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d003      	beq.n	80037c0 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80037bc:	2b07      	cmp	r3, #7
 80037be:	d102      	bne.n	80037c6 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80037c0:	2302      	movs	r3, #2
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	e001      	b.n	80037ca <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	01db      	lsls	r3, r3, #7
 80037d4:	4413      	add	r3, r2
 80037d6:	3384      	adds	r3, #132	; 0x84
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	4611      	mov	r1, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	01d2      	lsls	r2, r2, #7
 80037e4:	440a      	add	r2, r1
 80037e6:	3284      	adds	r2, #132	; 0x84
 80037e8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80037ec:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	fb02 f303 	mul.w	r3, r2, r3
 80037f8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	6859      	ldr	r1, [r3, #4]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	1acb      	subs	r3, r1, r3
 8003804:	69f9      	ldr	r1, [r7, #28]
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800380c:	68f9      	ldr	r1, [r7, #12]
 800380e:	6809      	ldr	r1, [r1, #0]
 8003810:	4608      	mov	r0, r1
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	01c9      	lsls	r1, r1, #7
 8003816:	4401      	add	r1, r0
 8003818:	3184      	adds	r1, #132	; 0x84
 800381a:	4313      	orrs	r3, r2
 800381c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	01db      	lsls	r3, r3, #7
 8003828:	4413      	add	r3, r2
 800382a:	3384      	adds	r3, #132	; 0x84
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	4611      	mov	r1, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	01d2      	lsls	r2, r2, #7
 8003838:	440a      	add	r2, r1
 800383a:	3284      	adds	r2, #132	; 0x84
 800383c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003840:	f023 0307 	bic.w	r3, r3, #7
 8003844:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	01db      	lsls	r3, r3, #7
 8003850:	4413      	add	r3, r2
 8003852:	3384      	adds	r3, #132	; 0x84
 8003854:	461a      	mov	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	01db      	lsls	r3, r3, #7
 8003866:	4413      	add	r3, r2
 8003868:	3384      	adds	r3, #132	; 0x84
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	4611      	mov	r1, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	01d2      	lsls	r2, r2, #7
 8003876:	440a      	add	r2, r1
 8003878:	3284      	adds	r2, #132	; 0x84
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6013      	str	r3, [r2, #0]
}
 8003880:	bf00      	nop
 8003882:	3724      	adds	r7, #36	; 0x24
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <HAL_PWREx_EnableOverDrive+0x90>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	4a1f      	ldr	r2, [pc, #124]	; (800391c <HAL_PWREx_EnableOverDrive+0x90>)
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
 80038a6:	4b1d      	ldr	r3, [pc, #116]	; (800391c <HAL_PWREx_EnableOverDrive+0x90>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038b2:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <HAL_PWREx_EnableOverDrive+0x94>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038b8:	f7fd ff12 	bl	80016e0 <HAL_GetTick>
 80038bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038be:	e009      	b.n	80038d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038c0:	f7fd ff0e 	bl	80016e0 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ce:	d901      	bls.n	80038d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e01f      	b.n	8003914 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038d4:	4b13      	ldr	r3, [pc, #76]	; (8003924 <HAL_PWREx_EnableOverDrive+0x98>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e0:	d1ee      	bne.n	80038c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038e8:	f7fd fefa 	bl	80016e0 <HAL_GetTick>
 80038ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038ee:	e009      	b.n	8003904 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038f0:	f7fd fef6 	bl	80016e0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038fe:	d901      	bls.n	8003904 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e007      	b.n	8003914 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003904:	4b07      	ldr	r3, [pc, #28]	; (8003924 <HAL_PWREx_EnableOverDrive+0x98>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003910:	d1ee      	bne.n	80038f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40023800 	.word	0x40023800
 8003920:	420e0040 	.word	0x420e0040
 8003924:	40007000 	.word	0x40007000
 8003928:	420e0044 	.word	0x420e0044

0800392c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0cc      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003940:	4b68      	ldr	r3, [pc, #416]	; (8003ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d90c      	bls.n	8003968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b65      	ldr	r3, [pc, #404]	; (8003ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b63      	ldr	r3, [pc, #396]	; (8003ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0b8      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d020      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003980:	4b59      	ldr	r3, [pc, #356]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a58      	ldr	r2, [pc, #352]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800398a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003998:	4b53      	ldr	r3, [pc, #332]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4a52      	ldr	r2, [pc, #328]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a4:	4b50      	ldr	r3, [pc, #320]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	494d      	ldr	r1, [pc, #308]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d044      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d107      	bne.n	80039da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	4b47      	ldr	r3, [pc, #284]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d119      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e07f      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d003      	beq.n	80039ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d107      	bne.n	80039fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ea:	4b3f      	ldr	r3, [pc, #252]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e06f      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fa:	4b3b      	ldr	r3, [pc, #236]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e067      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a0a:	4b37      	ldr	r3, [pc, #220]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f023 0203 	bic.w	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4934      	ldr	r1, [pc, #208]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a1c:	f7fd fe60 	bl	80016e0 <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a24:	f7fd fe5c 	bl	80016e0 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e04f      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 020c 	and.w	r2, r3, #12
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d1eb      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a4c:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d20c      	bcs.n	8003a74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	4b22      	ldr	r3, [pc, #136]	; (8003ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e032      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a80:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4916      	ldr	r1, [pc, #88]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a9e:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	490e      	ldr	r1, [pc, #56]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ab2:	f000 f821 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	490a      	ldr	r1, [pc, #40]	; (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003ac4:	5ccb      	ldrb	r3, [r1, r3]
 8003ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aca:	4a09      	ldr	r2, [pc, #36]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd fdc0 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023c00 	.word	0x40023c00
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	0800873c 	.word	0x0800873c
 8003af0:	20000044 	.word	0x20000044
 8003af4:	20000048 	.word	0x20000048

08003af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003afc:	b094      	sub	sp, #80	; 0x50
 8003afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	647b      	str	r3, [r7, #68]	; 0x44
 8003b04:	2300      	movs	r3, #0
 8003b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b08:	2300      	movs	r3, #0
 8003b0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b10:	4b79      	ldr	r3, [pc, #484]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d00d      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x40>
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	f200 80e1 	bhi.w	8003ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x34>
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d003      	beq.n	8003b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b2a:	e0db      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b2c:	4b73      	ldr	r3, [pc, #460]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8003b2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b30:	e0db      	b.n	8003cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b32:	4b73      	ldr	r3, [pc, #460]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b36:	e0d8      	b.n	8003cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b38:	4b6f      	ldr	r3, [pc, #444]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b42:	4b6d      	ldr	r3, [pc, #436]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d063      	beq.n	8003c16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4e:	4b6a      	ldr	r3, [pc, #424]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	099b      	lsrs	r3, r3, #6
 8003b54:	2200      	movs	r2, #0
 8003b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b60:	633b      	str	r3, [r7, #48]	; 0x30
 8003b62:	2300      	movs	r3, #0
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
 8003b66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	462b      	mov	r3, r5
 8003b6e:	f04f 0000 	mov.w	r0, #0
 8003b72:	f04f 0100 	mov.w	r1, #0
 8003b76:	0159      	lsls	r1, r3, #5
 8003b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b7c:	0150      	lsls	r0, r2, #5
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4621      	mov	r1, r4
 8003b84:	1a51      	subs	r1, r2, r1
 8003b86:	6139      	str	r1, [r7, #16]
 8003b88:	4629      	mov	r1, r5
 8003b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b9c:	4659      	mov	r1, fp
 8003b9e:	018b      	lsls	r3, r1, #6
 8003ba0:	4651      	mov	r1, sl
 8003ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ba6:	4651      	mov	r1, sl
 8003ba8:	018a      	lsls	r2, r1, #6
 8003baa:	4651      	mov	r1, sl
 8003bac:	ebb2 0801 	subs.w	r8, r2, r1
 8003bb0:	4659      	mov	r1, fp
 8003bb2:	eb63 0901 	sbc.w	r9, r3, r1
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bca:	4690      	mov	r8, r2
 8003bcc:	4699      	mov	r9, r3
 8003bce:	4623      	mov	r3, r4
 8003bd0:	eb18 0303 	adds.w	r3, r8, r3
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	462b      	mov	r3, r5
 8003bd8:	eb49 0303 	adc.w	r3, r9, r3
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bea:	4629      	mov	r1, r5
 8003bec:	024b      	lsls	r3, r1, #9
 8003bee:	4621      	mov	r1, r4
 8003bf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	024a      	lsls	r2, r1, #9
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfe:	2200      	movs	r2, #0
 8003c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c08:	f7fc faf4 	bl	80001f4 <__aeabi_uldivmod>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4613      	mov	r3, r2
 8003c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c14:	e058      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c16:	4b38      	ldr	r3, [pc, #224]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	099b      	lsrs	r3, r3, #6
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	4611      	mov	r1, r2
 8003c22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c26:	623b      	str	r3, [r7, #32]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c30:	4642      	mov	r2, r8
 8003c32:	464b      	mov	r3, r9
 8003c34:	f04f 0000 	mov.w	r0, #0
 8003c38:	f04f 0100 	mov.w	r1, #0
 8003c3c:	0159      	lsls	r1, r3, #5
 8003c3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c42:	0150      	lsls	r0, r2, #5
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4641      	mov	r1, r8
 8003c4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c4e:	4649      	mov	r1, r9
 8003c50:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c68:	ebb2 040a 	subs.w	r4, r2, sl
 8003c6c:	eb63 050b 	sbc.w	r5, r3, fp
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	00eb      	lsls	r3, r5, #3
 8003c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c7e:	00e2      	lsls	r2, r4, #3
 8003c80:	4614      	mov	r4, r2
 8003c82:	461d      	mov	r5, r3
 8003c84:	4643      	mov	r3, r8
 8003c86:	18e3      	adds	r3, r4, r3
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	eb45 0303 	adc.w	r3, r5, r3
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	028b      	lsls	r3, r1, #10
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ca8:	4621      	mov	r1, r4
 8003caa:	028a      	lsls	r2, r1, #10
 8003cac:	4610      	mov	r0, r2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	61fa      	str	r2, [r7, #28]
 8003cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cbc:	f7fc fa9a 	bl	80001f4 <__aeabi_uldivmod>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003cd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ce2:	e002      	b.n	8003cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ce6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3750      	adds	r7, #80	; 0x50
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	00f42400 	.word	0x00f42400
 8003d00:	007a1200 	.word	0x007a1200

08003d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d2c:	4b66      	ldr	r3, [pc, #408]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d32:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3a:	4963      	ldr	r1, [pc, #396]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003d4e:	4b5e      	ldr	r3, [pc, #376]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d54:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	495a      	ldr	r1, [pc, #360]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10b      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d075      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d88:	4b50      	ldr	r3, [pc, #320]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d8e:	f7fd fca7 	bl	80016e0 <HAL_GetTick>
 8003d92:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d96:	f7fd fca3 	bl	80016e0 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e1dc      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003da8:	4b47      	ldr	r3, [pc, #284]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f0      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d009      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	019a      	lsls	r2, r3, #6
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	071b      	lsls	r3, r3, #28
 8003dcc:	493e      	ldr	r1, [pc, #248]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01f      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003de0:	4b39      	ldr	r3, [pc, #228]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de6:	0f1b      	lsrs	r3, r3, #28
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	019a      	lsls	r2, r3, #6
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	071b      	lsls	r3, r3, #28
 8003e00:	4931      	ldr	r1, [pc, #196]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e08:	4b2f      	ldr	r3, [pc, #188]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e0e:	f023 021f 	bic.w	r2, r3, #31
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	492b      	ldr	r1, [pc, #172]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00d      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	019a      	lsls	r2, r3, #6
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	061b      	lsls	r3, r3, #24
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	071b      	lsls	r3, r3, #28
 8003e40:	4921      	ldr	r1, [pc, #132]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e48:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e4e:	f7fd fc47 	bl	80016e0 <HAL_GetTick>
 8003e52:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e54:	e008      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e56:	f7fd fc43 	bl	80016e0 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e17c      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e68:	4b17      	ldr	r3, [pc, #92]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d112      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80ce 	beq.w	8004036 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ea2:	f040 80c8 	bne.w	8004036 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eac:	f7fd fc18 	bl	80016e0 <HAL_GetTick>
 8003eb0:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003eb2:	e00f      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003eb4:	f7fd fc14 	bl	80016e0 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d908      	bls.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e14d      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	42470068 	.word	0x42470068
 8003ed0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ed4:	4ba5      	ldr	r3, [pc, #660]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee0:	d0e8      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02e      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003eee:	4b9f      	ldr	r3, [pc, #636]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	3301      	adds	r3, #1
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f00:	4b9a      	ldr	r3, [pc, #616]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f06:	0f1b      	lsrs	r3, r3, #28
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	019a      	lsls	r2, r3, #6
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	041b      	lsls	r3, r3, #16
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	061b      	lsls	r3, r3, #24
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	071b      	lsls	r3, r3, #28
 8003f2a:	4990      	ldr	r1, [pc, #576]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f32:	4b8e      	ldr	r3, [pc, #568]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	3b01      	subs	r3, #1
 8003f42:	021b      	lsls	r3, r3, #8
 8003f44:	4989      	ldr	r1, [pc, #548]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d02c      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003f58:	4b84      	ldr	r3, [pc, #528]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	0c1b      	lsrs	r3, r3, #16
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	3301      	adds	r3, #1
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f6a:	4b80      	ldr	r3, [pc, #512]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	0e1b      	lsrs	r3, r3, #24
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	019a      	lsls	r2, r3, #6
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	3b01      	subs	r3, #1
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	431a      	orrs	r2, r3
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	061b      	lsls	r3, r3, #24
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	071b      	lsls	r3, r3, #28
 8003f94:	4975      	ldr	r1, [pc, #468]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f9c:	4b73      	ldr	r3, [pc, #460]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	4970      	ldr	r1, [pc, #448]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d024      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8003fc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc6:	d11f      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fc8:	4b68      	ldr	r3, [pc, #416]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	0e1b      	lsrs	r3, r3, #24
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fd6:	4b65      	ldr	r3, [pc, #404]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	0f1b      	lsrs	r3, r3, #28
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	019a      	lsls	r2, r3, #6
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	041b      	lsls	r3, r3, #16
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	071b      	lsls	r3, r3, #28
 8004000:	495a      	ldr	r1, [pc, #360]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004008:	4b59      	ldr	r3, [pc, #356]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800400e:	f7fd fb67 	bl	80016e0 <HAL_GetTick>
 8004012:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004014:	e008      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004016:	f7fd fb63 	bl	80016e0 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e09c      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004028:	4b50      	ldr	r3, [pc, #320]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004034:	d1ef      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 8083 	beq.w	800414a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004044:	2300      	movs	r3, #0
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	4b48      	ldr	r3, [pc, #288]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	4a47      	ldr	r2, [pc, #284]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800404e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004052:	6413      	str	r3, [r2, #64]	; 0x40
 8004054:	4b45      	ldr	r3, [pc, #276]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004060:	4b44      	ldr	r3, [pc, #272]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a43      	ldr	r2, [pc, #268]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800406c:	f7fd fb38 	bl	80016e0 <HAL_GetTick>
 8004070:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004074:	f7fd fb34 	bl	80016e0 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e06d      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004086:	4b3b      	ldr	r3, [pc, #236]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004092:	4b36      	ldr	r3, [pc, #216]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d02f      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d028      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040b0:	4b2e      	ldr	r3, [pc, #184]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b8:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ba:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80040bc:	2201      	movs	r2, #1
 80040be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040c0:	4b2d      	ldr	r3, [pc, #180]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040c6:	4a29      	ldr	r2, [pc, #164]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040cc:	4b27      	ldr	r3, [pc, #156]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d114      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040d8:	f7fd fb02 	bl	80016e0 <HAL_GetTick>
 80040dc:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040de:	e00a      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e0:	f7fd fafe 	bl	80016e0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e035      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f6:	4b1d      	ldr	r3, [pc, #116]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0ee      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800410e:	d10d      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004110:	4b16      	ldr	r3, [pc, #88]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004124:	4911      	ldr	r1, [pc, #68]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
 800412a:	e005      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a0e      	ldr	r2, [pc, #56]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004132:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004136:	6093      	str	r3, [r2, #8]
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800413a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004144:	4909      	ldr	r1, [pc, #36]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004146:	4313      	orrs	r3, r2
 8004148:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b00      	cmp	r3, #0
 8004154:	d004      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800415e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800
 8004170:	42470070 	.word	0x42470070
 8004174:	40007000 	.word	0x40007000
 8004178:	42470e40 	.word	0x42470e40
 800417c:	424711e0 	.word	0x424711e0

08004180 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e273      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d075      	beq.n	800428a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800419e:	4b88      	ldr	r3, [pc, #544]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d00c      	beq.n	80041c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041aa:	4b85      	ldr	r3, [pc, #532]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d112      	bne.n	80041dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b6:	4b82      	ldr	r3, [pc, #520]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c2:	d10b      	bne.n	80041dc <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c4:	4b7e      	ldr	r3, [pc, #504]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d05b      	beq.n	8004288 <HAL_RCC_OscConfig+0x108>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d157      	bne.n	8004288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e24e      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e4:	d106      	bne.n	80041f4 <HAL_RCC_OscConfig+0x74>
 80041e6:	4b76      	ldr	r3, [pc, #472]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a75      	ldr	r2, [pc, #468]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	e01d      	b.n	8004230 <HAL_RCC_OscConfig+0xb0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041fc:	d10c      	bne.n	8004218 <HAL_RCC_OscConfig+0x98>
 80041fe:	4b70      	ldr	r3, [pc, #448]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a6f      	ldr	r2, [pc, #444]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	4b6d      	ldr	r3, [pc, #436]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a6c      	ldr	r2, [pc, #432]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	e00b      	b.n	8004230 <HAL_RCC_OscConfig+0xb0>
 8004218:	4b69      	ldr	r3, [pc, #420]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a68      	ldr	r2, [pc, #416]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 800421e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	4b66      	ldr	r3, [pc, #408]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a65      	ldr	r2, [pc, #404]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 800422a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800422e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d013      	beq.n	8004260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fd fa52 	bl	80016e0 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004240:	f7fd fa4e 	bl	80016e0 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b64      	cmp	r3, #100	; 0x64
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e213      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	4b5b      	ldr	r3, [pc, #364]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0xc0>
 800425e:	e014      	b.n	800428a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fd fa3e 	bl	80016e0 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004268:	f7fd fa3a 	bl	80016e0 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e1ff      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427a:	4b51      	ldr	r3, [pc, #324]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0xe8>
 8004286:	e000      	b.n	800428a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d063      	beq.n	800435e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004296:	4b4a      	ldr	r3, [pc, #296]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00b      	beq.n	80042ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a2:	4b47      	ldr	r3, [pc, #284]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d11c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ae:	4b44      	ldr	r3, [pc, #272]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d116      	bne.n	80042e8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ba:	4b41      	ldr	r3, [pc, #260]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_RCC_OscConfig+0x152>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d001      	beq.n	80042d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e1d3      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d2:	4b3b      	ldr	r3, [pc, #236]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4937      	ldr	r1, [pc, #220]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e6:	e03a      	b.n	800435e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d020      	beq.n	8004332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f0:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <HAL_RCC_OscConfig+0x244>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f6:	f7fd f9f3 	bl	80016e0 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042fe:	f7fd f9ef 	bl	80016e0 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e1b4      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004310:	4b2b      	ldr	r3, [pc, #172]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431c:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4925      	ldr	r1, [pc, #148]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 800432c:	4313      	orrs	r3, r2
 800432e:	600b      	str	r3, [r1, #0]
 8004330:	e015      	b.n	800435e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004332:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <HAL_RCC_OscConfig+0x244>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fd f9d2 	bl	80016e0 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004340:	f7fd f9ce 	bl	80016e0 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e193      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004352:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d036      	beq.n	80043d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d016      	beq.n	80043a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004372:	4b15      	ldr	r3, [pc, #84]	; (80043c8 <HAL_RCC_OscConfig+0x248>)
 8004374:	2201      	movs	r2, #1
 8004376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004378:	f7fd f9b2 	bl	80016e0 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004380:	f7fd f9ae 	bl	80016e0 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e173      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0x200>
 800439e:	e01b      	b.n	80043d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a0:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <HAL_RCC_OscConfig+0x248>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a6:	f7fd f99b 	bl	80016e0 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ac:	e00e      	b.n	80043cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ae:	f7fd f997 	bl	80016e0 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d907      	bls.n	80043cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e15c      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
 80043c0:	40023800 	.word	0x40023800
 80043c4:	42470000 	.word	0x42470000
 80043c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043cc:	4b8a      	ldr	r3, [pc, #552]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 80043ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1ea      	bne.n	80043ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8097 	beq.w	8004514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e6:	2300      	movs	r3, #0
 80043e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ea:	4b83      	ldr	r3, [pc, #524]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10f      	bne.n	8004416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]
 80043fa:	4b7f      	ldr	r3, [pc, #508]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	4a7e      	ldr	r2, [pc, #504]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 8004400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004404:	6413      	str	r3, [r2, #64]	; 0x40
 8004406:	4b7c      	ldr	r3, [pc, #496]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004412:	2301      	movs	r3, #1
 8004414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004416:	4b79      	ldr	r3, [pc, #484]	; (80045fc <HAL_RCC_OscConfig+0x47c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d118      	bne.n	8004454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004422:	4b76      	ldr	r3, [pc, #472]	; (80045fc <HAL_RCC_OscConfig+0x47c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a75      	ldr	r2, [pc, #468]	; (80045fc <HAL_RCC_OscConfig+0x47c>)
 8004428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800442e:	f7fd f957 	bl	80016e0 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004436:	f7fd f953 	bl	80016e0 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e118      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004448:	4b6c      	ldr	r3, [pc, #432]	; (80045fc <HAL_RCC_OscConfig+0x47c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d106      	bne.n	800446a <HAL_RCC_OscConfig+0x2ea>
 800445c:	4b66      	ldr	r3, [pc, #408]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	4a65      	ldr	r2, [pc, #404]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	6713      	str	r3, [r2, #112]	; 0x70
 8004468:	e01c      	b.n	80044a4 <HAL_RCC_OscConfig+0x324>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b05      	cmp	r3, #5
 8004470:	d10c      	bne.n	800448c <HAL_RCC_OscConfig+0x30c>
 8004472:	4b61      	ldr	r3, [pc, #388]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	4a60      	ldr	r2, [pc, #384]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 8004478:	f043 0304 	orr.w	r3, r3, #4
 800447c:	6713      	str	r3, [r2, #112]	; 0x70
 800447e:	4b5e      	ldr	r3, [pc, #376]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	4a5d      	ldr	r2, [pc, #372]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6713      	str	r3, [r2, #112]	; 0x70
 800448a:	e00b      	b.n	80044a4 <HAL_RCC_OscConfig+0x324>
 800448c:	4b5a      	ldr	r3, [pc, #360]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	4a59      	ldr	r2, [pc, #356]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 8004492:	f023 0301 	bic.w	r3, r3, #1
 8004496:	6713      	str	r3, [r2, #112]	; 0x70
 8004498:	4b57      	ldr	r3, [pc, #348]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	4a56      	ldr	r2, [pc, #344]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 800449e:	f023 0304 	bic.w	r3, r3, #4
 80044a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d015      	beq.n	80044d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fd f918 	bl	80016e0 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b2:	e00a      	b.n	80044ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b4:	f7fd f914 	bl	80016e0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e0d7      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ca:	4b4b      	ldr	r3, [pc, #300]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0ee      	beq.n	80044b4 <HAL_RCC_OscConfig+0x334>
 80044d6:	e014      	b.n	8004502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d8:	f7fd f902 	bl	80016e0 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044de:	e00a      	b.n	80044f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e0:	f7fd f8fe 	bl	80016e0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e0c1      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f6:	4b40      	ldr	r3, [pc, #256]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1ee      	bne.n	80044e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d105      	bne.n	8004514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004508:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	4a3a      	ldr	r2, [pc, #232]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 800450e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004512:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80ad 	beq.w	8004678 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800451e:	4b36      	ldr	r3, [pc, #216]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b08      	cmp	r3, #8
 8004528:	d060      	beq.n	80045ec <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d145      	bne.n	80045be <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004532:	4b33      	ldr	r3, [pc, #204]	; (8004600 <HAL_RCC_OscConfig+0x480>)
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fd f8d2 	bl	80016e0 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004540:	f7fd f8ce 	bl	80016e0 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e093      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004552:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	019b      	lsls	r3, r3, #6
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	3b01      	subs	r3, #1
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	061b      	lsls	r3, r3, #24
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	071b      	lsls	r3, r3, #28
 800458a:	491b      	ldr	r1, [pc, #108]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004590:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <HAL_RCC_OscConfig+0x480>)
 8004592:	2201      	movs	r2, #1
 8004594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004596:	f7fd f8a3 	bl	80016e0 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459e:	f7fd f89f 	bl	80016e0 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e064      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b0:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f0      	beq.n	800459e <HAL_RCC_OscConfig+0x41e>
 80045bc:	e05c      	b.n	8004678 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045be:	4b10      	ldr	r3, [pc, #64]	; (8004600 <HAL_RCC_OscConfig+0x480>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd f88c 	bl	80016e0 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045cc:	f7fd f888 	bl	80016e0 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e04d      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_RCC_OscConfig+0x478>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x44c>
 80045ea:	e045      	b.n	8004678 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d107      	bne.n	8004604 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e040      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40007000 	.word	0x40007000
 8004600:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004604:	4b1f      	ldr	r3, [pc, #124]	; (8004684 <HAL_RCC_OscConfig+0x504>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d030      	beq.n	8004674 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800461c:	429a      	cmp	r2, r3
 800461e:	d129      	bne.n	8004674 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d122      	bne.n	8004674 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004634:	4013      	ands	r3, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800463a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800463c:	4293      	cmp	r3, r2
 800463e:	d119      	bne.n	8004674 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	085b      	lsrs	r3, r3, #1
 800464c:	3b01      	subs	r3, #1
 800464e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d10f      	bne.n	8004674 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d107      	bne.n	8004674 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d001      	beq.n	8004678 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800

08004688 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e025      	b.n	80046e8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f81d 	bl	80046f0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3304      	adds	r3, #4
 80046c6:	4619      	mov	r1, r3
 80046c8:	4610      	mov	r0, r2
 80046ca:	f000 f878 	bl	80047be <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	461a      	mov	r2, r3
 80046d8:	6839      	ldr	r1, [r7, #0]
 80046da:	f000 f8cd 	bl	8004878 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004716:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004718:	7dfb      	ldrb	r3, [r7, #23]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d101      	bne.n	8004722 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800471e:	2302      	movs	r3, #2
 8004720:	e021      	b.n	8004766 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d002      	beq.n	800472e <HAL_SDRAM_SendCommand+0x2a>
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	2b05      	cmp	r3, #5
 800472c:	d118      	bne.n	8004760 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f903 	bl	800494a <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d104      	bne.n	8004756 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2205      	movs	r2, #5
 8004750:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004754:	e006      	b.n	8004764 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800475e:	e001      	b.n	8004764 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d101      	bne.n	8004788 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004784:	2302      	movs	r3, #2
 8004786:	e016      	b.n	80047b6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	d10f      	bne.n	80047b4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6839      	ldr	r1, [r7, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f90e 	bl	80049c4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	e000      	b.n	80047b6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d123      	bne.n	8004818 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80047d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	6851      	ldr	r1, [r2, #4]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	6892      	ldr	r2, [r2, #8]
 80047e4:	4311      	orrs	r1, r2
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	68d2      	ldr	r2, [r2, #12]
 80047ea:	4311      	orrs	r1, r2
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	6912      	ldr	r2, [r2, #16]
 80047f0:	4311      	orrs	r1, r2
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	6952      	ldr	r2, [r2, #20]
 80047f6:	4311      	orrs	r1, r2
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	6992      	ldr	r2, [r2, #24]
 80047fc:	4311      	orrs	r1, r2
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	69d2      	ldr	r2, [r2, #28]
 8004802:	4311      	orrs	r1, r2
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	6a12      	ldr	r2, [r2, #32]
 8004808:	4311      	orrs	r1, r2
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800480e:	430a      	orrs	r2, r1
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e028      	b.n	800486a <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	69d9      	ldr	r1, [r3, #28]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	4319      	orrs	r1, r3
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	430b      	orrs	r3, r1
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800483e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	6851      	ldr	r1, [r2, #4]
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	6892      	ldr	r2, [r2, #8]
 800484a:	4311      	orrs	r1, r2
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	68d2      	ldr	r2, [r2, #12]
 8004850:	4311      	orrs	r1, r2
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	6912      	ldr	r2, [r2, #16]
 8004856:	4311      	orrs	r1, r2
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	6952      	ldr	r2, [r2, #20]
 800485c:	4311      	orrs	r1, r2
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	6992      	ldr	r2, [r2, #24]
 8004862:	430a      	orrs	r2, r1
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d128      	bne.n	80048dc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	1e59      	subs	r1, r3, #1
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	3b01      	subs	r3, #1
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	4319      	orrs	r1, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	4319      	orrs	r1, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	031b      	lsls	r3, r3, #12
 80048b4:	4319      	orrs	r1, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	041b      	lsls	r3, r3, #16
 80048be:	4319      	orrs	r1, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	051b      	lsls	r3, r3, #20
 80048c8:	4319      	orrs	r1, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	061b      	lsls	r3, r3, #24
 80048d2:	430b      	orrs	r3, r1
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	609a      	str	r2, [r3, #8]
 80048da:	e02f      	b.n	800493c <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	68d2      	ldr	r2, [r2, #12]
 80048ec:	3a01      	subs	r2, #1
 80048ee:	0311      	lsls	r1, r2, #12
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	6952      	ldr	r2, [r2, #20]
 80048f4:	3a01      	subs	r2, #1
 80048f6:	0512      	lsls	r2, r2, #20
 80048f8:	430a      	orrs	r2, r1
 80048fa:	431a      	orrs	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	1e59      	subs	r1, r3, #1
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	3b01      	subs	r3, #1
 8004914:	011b      	lsls	r3, r3, #4
 8004916:	4319      	orrs	r1, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	3b01      	subs	r3, #1
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	4319      	orrs	r1, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	3b01      	subs	r3, #1
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	4319      	orrs	r1, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	3b01      	subs	r3, #1
 8004932:	061b      	lsls	r3, r3, #24
 8004934:	430b      	orrs	r3, r1
 8004936:	431a      	orrs	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b086      	sub	sp, #24
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	0d9b      	lsrs	r3, r3, #22
 8004960:	059b      	lsls	r3, r3, #22
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	6811      	ldr	r1, [r2, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	6852      	ldr	r2, [r2, #4]
 800496a:	4311      	orrs	r1, r2
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	6892      	ldr	r2, [r2, #8]
 8004970:	3a01      	subs	r2, #1
 8004972:	0152      	lsls	r2, r2, #5
 8004974:	4311      	orrs	r1, r2
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	68d2      	ldr	r2, [r2, #12]
 800497a:	0252      	lsls	r2, r2, #9
 800497c:	430a      	orrs	r2, r1
 800497e:	431a      	orrs	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8004984:	f7fc feac 	bl	80016e0 <HAL_GetTick>
 8004988:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800498a:	e010      	b.n	80049ae <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d00c      	beq.n	80049ae <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <FMC_SDRAM_SendCommand+0x60>
 800499a:	f7fc fea1 	bl	80016e0 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d201      	bcs.n	80049ae <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e006      	b.n	80049bc <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	d0e8      	beq.n	800498c <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80049d6:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	0052      	lsls	r2, r2, #1
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80049f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049f8:	480d      	ldr	r0, [pc, #52]	; (8004a30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80049fa:	490e      	ldr	r1, [pc, #56]	; (8004a34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80049fc:	4a0e      	ldr	r2, [pc, #56]	; (8004a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a00:	e002      	b.n	8004a08 <LoopCopyDataInit>

08004a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a06:	3304      	adds	r3, #4

08004a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a0c:	d3f9      	bcc.n	8004a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a0e:	4a0b      	ldr	r2, [pc, #44]	; (8004a3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004a10:	4c0b      	ldr	r4, [pc, #44]	; (8004a40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a14:	e001      	b.n	8004a1a <LoopFillZerobss>

08004a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a18:	3204      	adds	r2, #4

08004a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a1c:	d3fb      	bcc.n	8004a16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a1e:	f7fc fdbb 	bl	8001598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a22:	f000 fb37 	bl	8005094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a26:	f000 f857 	bl	8004ad8 <main>
  bx  lr    
 8004a2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004a2c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a34:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8004a38:	08053764 	.word	0x08053764
  ldr r2, =_sbss
 8004a3c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8004a40:	20000354 	.word	0x20000354

08004a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a44:	e7fe      	b.n	8004a44 <ADC_IRQHandler>

08004a46 <OnError_Handler>:
/**
 * @brief Error handler function.
 * @param condition The condition to check if an error has occurred.
 */
static void OnError_Handler(uint32_t condition)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  if(condition)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <OnError_Handler+0x16>
  {
    BSP_LED_On(LED3);
 8004a54:	2002      	movs	r0, #2
 8004a56:	f7fb ff43 	bl	80008e0 <BSP_LED_On>
    while(1) { ; }
 8004a5a:	e7fe      	b.n	8004a5a <OnError_Handler+0x14>
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <DrawButton>:

/**
 * @brief Draws a button on the screen.
 */
static void DrawButton(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
    uint16_t x_pos = 600;
 8004a6a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004a6e:	80fb      	strh	r3, [r7, #6]
    uint16_t y_pos = 240;
 8004a70:	23f0      	movs	r3, #240	; 0xf0
 8004a72:	80bb      	strh	r3, [r7, #4]
    uint16_t width = 100;
 8004a74:	2364      	movs	r3, #100	; 0x64
 8004a76:	807b      	strh	r3, [r7, #2]
    uint16_t height = 50;
 8004a78:	2332      	movs	r3, #50	; 0x32
 8004a7a:	803b      	strh	r3, [r7, #0]

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8004a7c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004a80:	f7fc f816 	bl	8000ab0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(x_pos, y_pos, width, height);
 8004a84:	883b      	ldrh	r3, [r7, #0]
 8004a86:	887a      	ldrh	r2, [r7, #2]
 8004a88:	88b9      	ldrh	r1, [r7, #4]
 8004a8a:	88f8      	ldrh	r0, [r7, #6]
 8004a8c:	f7fc f996 	bl	8000dbc <BSP_LCD_FillRect>

    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	f7fc f80c 	bl	8000ab0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8004a98:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004a9c:	f7fc f820 	bl	8000ae0 <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font20);
 8004aa0:	480b      	ldr	r0, [pc, #44]	; (8004ad0 <DrawButton+0x6c>)
 8004aa2:	f7fc f837 	bl	8000b14 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(1000 + (width/2), y_pos + (height/2), (uint8_t *)"SWITCH", CENTER_MODE);
 8004aa6:	887b      	ldrh	r3, [r7, #2]
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004ab0:	b298      	uxth	r0, r3
 8004ab2:	883b      	ldrh	r3, [r7, #0]
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	88bb      	ldrh	r3, [r7, #4]
 8004aba:	4413      	add	r3, r2
 8004abc:	b299      	uxth	r1, r3
 8004abe:	2301      	movs	r3, #1
 8004ac0:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <DrawButton+0x70>)
 8004ac2:	f7fc f89b 	bl	8000bfc <BSP_LCD_DisplayStringAt>
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000028 	.word	0x20000028
 8004ad4:	08005138 	.word	0x08005138

08004ad8 <main>:
/**
 * @brief Main function.
 * @return int
 */
int main(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af02      	add	r7, sp, #8
  uint8_t lcd_status = LCD_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	71fb      	strb	r3, [r7, #7]

  HAL_Init();
 8004ae2:	f7fc fd8f 	bl	8001604 <HAL_Init>
  SystemClock_Config();
 8004ae6:	f000 f861 	bl	8004bac <SystemClock_Config>
  BSP_SDRAM_Init();
 8004aea:	f7fc fb71 	bl	80011d0 <BSP_SDRAM_Init>
  lcd_status = LCD_Init();
 8004aee:	f000 f8cd 	bl	8004c8c <LCD_Init>
 8004af2:	4603      	mov	r3, r0
 8004af4:	71fb      	strb	r3, [r7, #7]
  OnError_Handler(lcd_status != LCD_OK);
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff ff9f 	bl	8004a46 <OnError_Handler>

  BSP_LCD_LayerDefaultInit(0, LAYER0_ADDRESS);
 8004b08:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	f7fb ff5f 	bl	80009d0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8004b12:	2000      	movs	r0, #0
 8004b14:	f7fb ffbc 	bl	8000a90 <BSP_LCD_SelectLayer>
  LCD_BriefDisplay();
 8004b18:	f000 f9e2 	bl	8004ee0 <LCD_BriefDisplay>

  // Copy the image to the screen
  CopyBuffer((uint32_t *)image_320x240_argb8888, (uint32_t *)LAYER0_ADDRESS, 50, 160, 320, 240);
 8004b1c:	23f0      	movs	r3, #240	; 0xf0
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	23a0      	movs	r3, #160	; 0xa0
 8004b28:	2232      	movs	r2, #50	; 0x32
 8004b2a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8004b2e:	4812      	ldr	r0, [pc, #72]	; (8004b78 <main+0xa0>)
 8004b30:	f000 fa12 	bl	8004f58 <CopyBuffer>
  pending_buffer = 0;
 8004b34:	4b11      	ldr	r3, [pc, #68]	; (8004b7c <main+0xa4>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
  HAL_DSI_Refresh(&hdsi_eval);
 8004b3a:	4811      	ldr	r0, [pc, #68]	; (8004b80 <main+0xa8>)
 8004b3c:	f7fe f832 	bl	8002ba4 <HAL_DSI_Refresh>
  LCD_BriefDisplay();
 8004b40:	f000 f9ce 	bl	8004ee0 <LCD_BriefDisplay>
  CopyBuffer((uint32_t *)image_320x240_argb8888, (uint32_t *)LAYER0_ADDRESS, 50, 160, 320, 240); // Copy the buffer again
 8004b44:	23f0      	movs	r3, #240	; 0xf0
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	23a0      	movs	r3, #160	; 0xa0
 8004b50:	2232      	movs	r2, #50	; 0x32
 8004b52:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8004b56:	4808      	ldr	r0, [pc, #32]	; (8004b78 <main+0xa0>)
 8004b58:	f000 f9fe 	bl	8004f58 <CopyBuffer>
  DrawButton();
 8004b5c:	f7ff ff82 	bl	8004a64 <DrawButton>

  while (1)
  {
    if(pending_buffer < 0)
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <main+0xa4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	dafb      	bge.n	8004b60 <main+0x88>
    {
      pending_buffer = 0;
 8004b68:	4b04      	ldr	r3, [pc, #16]	; (8004b7c <main+0xa4>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
      HAL_DSI_Refresh(&hdsi_eval);
 8004b6e:	4804      	ldr	r0, [pc, #16]	; (8004b80 <main+0xa8>)
 8004b70:	f7fe f818 	bl	8002ba4 <HAL_DSI_Refresh>
    if(pending_buffer < 0)
 8004b74:	e7f4      	b.n	8004b60 <main+0x88>
 8004b76:	bf00      	nop
 8004b78:	08008754 	.word	0x08008754
 8004b7c:	20000050 	.word	0x20000050
 8004b80:	20000158 	.word	0x20000158

08004b84 <HAL_DSI_EndOfRefreshCallback>:
/**
 * @brief Callback function for DSI end of refresh.
 * @param hdsi Handle for the DSI.
 */
void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  if(pending_buffer >= 0)
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <HAL_DSI_EndOfRefreshCallback+0x24>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	db03      	blt.n	8004b9c <HAL_DSI_EndOfRefreshCallback+0x18>
  {
    pending_buffer = -1;
 8004b94:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <HAL_DSI_EndOfRefreshCallback+0x24>)
 8004b96:	f04f 32ff 	mov.w	r2, #4294967295
 8004b9a:	601a      	str	r2, [r3, #0]
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	20000050 	.word	0x20000050

08004bac <SystemClock_Config>:
 * as it sets the speed of the core clock and the bus clock frequencies.
 */


static void SystemClock_Config(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b096      	sub	sp, #88	; 0x58
 8004bb0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <SystemClock_Config+0xd8>)
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	4a30      	ldr	r2, [pc, #192]	; (8004c84 <SystemClock_Config+0xd8>)
 8004bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8004bc8:	4b2e      	ldr	r3, [pc, #184]	; (8004c84 <SystemClock_Config+0xd8>)
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	60bb      	str	r3, [r7, #8]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	607b      	str	r3, [r7, #4]
 8004bd8:	4b2b      	ldr	r3, [pc, #172]	; (8004c88 <SystemClock_Config+0xdc>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2a      	ldr	r2, [pc, #168]	; (8004c88 <SystemClock_Config+0xdc>)
 8004bde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	4b28      	ldr	r3, [pc, #160]	; (8004c88 <SystemClock_Config+0xdc>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bf8:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004bfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c02:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(USE_STM32469I_DISCO_REVA)
  RCC_OscInitStruct.PLL.PLLM = 25;
#else
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004c04:	2308      	movs	r3, #8
 8004c06:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
  RCC_OscInitStruct.PLL.PLLN = 360;
 8004c08:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004c0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004c12:	2307      	movs	r3, #7
 8004c14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 6;
 8004c16:	2306      	movs	r3, #6
 8004c18:	63fb      	str	r3, [r7, #60]	; 0x3c

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004c1a:	f107 030c 	add.w	r3, r7, #12
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff faae 	bl	8004180 <HAL_RCC_OscConfig>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8004c2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d000      	beq.n	8004c34 <SystemClock_Config+0x88>
  {
    while(1) { ; }
 8004c32:	e7fe      	b.n	8004c32 <SystemClock_Config+0x86>
  }
  
  ret = HAL_PWREx_EnableOverDrive();
 8004c34:	f7fe fe2a 	bl	800388c <HAL_PWREx_EnableOverDrive>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8004c3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d000      	beq.n	8004c48 <SystemClock_Config+0x9c>
  {
    while(1) { ; }
 8004c46:	e7fe      	b.n	8004c46 <SystemClock_Config+0x9a>
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004c48:	230f      	movs	r3, #15
 8004c4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c50:	2300      	movs	r3, #0
 8004c52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8004c54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8004c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c5e:	653b      	str	r3, [r7, #80]	; 0x50

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8004c60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c64:	2105      	movs	r1, #5
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fe60 	bl	800392c <HAL_RCC_ClockConfig>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8004c72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d000      	beq.n	8004c7c <SystemClock_Config+0xd0>
  {
    while(1) { ; }
 8004c7a:	e7fe      	b.n	8004c7a <SystemClock_Config+0xce>
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	3758      	adds	r7, #88	; 0x58
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40023800 	.word	0x40023800
 8004c88:	40007000 	.word	0x40007000

08004c8c <LCD_Init>:
 * initialization of the display hardware specific to the STM32F469 Discovery kit.
 *
 * @return uint8_t Returns LCD_OK if initialization was successful.
 */
static uint8_t LCD_Init(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  static DSI_CmdCfgTypeDef CmdCfg;
  static DSI_LPCmdTypeDef LPCmd;
  static DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  BSP_LCD_Reset();
 8004c90:	f7fb fe50 	bl	8000934 <BSP_LCD_Reset>
  BSP_LCD_MspInit();
 8004c94:	f7fc f916 	bl	8000ec4 <BSP_LCD_MspInit>

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004c98:	4b66      	ldr	r3, [pc, #408]	; (8004e34 <LCD_Init+0x1a8>)
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 417;
 8004c9e:	4b65      	ldr	r3, [pc, #404]	; (8004e34 <LCD_Init+0x1a8>)
 8004ca0:	f240 12a1 	movw	r2, #417	; 0x1a1
 8004ca4:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8004ca6:	4b63      	ldr	r3, [pc, #396]	; (8004e34 <LCD_Init+0x1a8>)
 8004ca8:	2205      	movs	r2, #5
 8004caa:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004cac:	4b61      	ldr	r3, [pc, #388]	; (8004e34 <LCD_Init+0x1a8>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004cb2:	4860      	ldr	r0, [pc, #384]	; (8004e34 <LCD_Init+0x1a8>)
 8004cb4:	f7ff f826 	bl	8003d04 <HAL_RCCEx_PeriphCLKConfig>

  hdsi_eval.Instance = DSI;
 8004cb8:	4b5f      	ldr	r3, [pc, #380]	; (8004e38 <LCD_Init+0x1ac>)
 8004cba:	4a60      	ldr	r2, [pc, #384]	; (8004e3c <LCD_Init+0x1b0>)
 8004cbc:	601a      	str	r2, [r3, #0]
  HAL_DSI_DeInit(&(hdsi_eval));
 8004cbe:	485e      	ldr	r0, [pc, #376]	; (8004e38 <LCD_Init+0x1ac>)
 8004cc0:	f7fd fc08 	bl	80024d4 <HAL_DSI_DeInit>

#if defined(USE_STM32469I_DISCO_REVA)  
  dsiPllInit.PLLNDIV  = 100;
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
#else
  dsiPllInit.PLLNDIV  = 125;
 8004cc4:	4b5e      	ldr	r3, [pc, #376]	; (8004e40 <LCD_Init+0x1b4>)
 8004cc6:	227d      	movs	r2, #125	; 0x7d
 8004cc8:	601a      	str	r2, [r3, #0]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;  
 8004cca:	4b5d      	ldr	r3, [pc, #372]	; (8004e40 <LCD_Init+0x1b4>)
 8004ccc:	2202      	movs	r2, #2
 8004cce:	605a      	str	r2, [r3, #4]
#endif
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;  
 8004cd0:	4b5b      	ldr	r3, [pc, #364]	; (8004e40 <LCD_Init+0x1b4>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	609a      	str	r2, [r3, #8]
  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8004cd6:	4b58      	ldr	r3, [pc, #352]	; (8004e38 <LCD_Init+0x1ac>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	60da      	str	r2, [r3, #12]
  hdsi_eval.Init.TXEscapeCkdiv = 0x4;
 8004cdc:	4b56      	ldr	r3, [pc, #344]	; (8004e38 <LCD_Init+0x1ac>)
 8004cde:	2204      	movs	r2, #4
 8004ce0:	609a      	str	r2, [r3, #8]
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8004ce2:	4957      	ldr	r1, [pc, #348]	; (8004e40 <LCD_Init+0x1b4>)
 8004ce4:	4854      	ldr	r0, [pc, #336]	; (8004e38 <LCD_Init+0x1ac>)
 8004ce6:	f7fd fad9 	bl	800229c <HAL_DSI_Init>

  CmdCfg.VirtualChannelID = 0;
 8004cea:	4b56      	ldr	r3, [pc, #344]	; (8004e44 <LCD_Init+0x1b8>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8004cf0:	4b54      	ldr	r3, [pc, #336]	; (8004e44 <LCD_Init+0x1b8>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	615a      	str	r2, [r3, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8004cf6:	4b53      	ldr	r3, [pc, #332]	; (8004e44 <LCD_Init+0x1b8>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	619a      	str	r2, [r3, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8004cfc:	4b51      	ldr	r3, [pc, #324]	; (8004e44 <LCD_Init+0x1b8>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	61da      	str	r2, [r3, #28]
  CmdCfg.ColorCoding = DSI_RGB888;
 8004d02:	4b50      	ldr	r3, [pc, #320]	; (8004e44 <LCD_Init+0x1b8>)
 8004d04:	2205      	movs	r2, #5
 8004d06:	605a      	str	r2, [r3, #4]
  CmdCfg.CommandSize = HACT;
 8004d08:	4b4e      	ldr	r3, [pc, #312]	; (8004e44 <LCD_Init+0x1b8>)
 8004d0a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004d0e:	609a      	str	r2, [r3, #8]
  CmdCfg.TearingEffectSource = DSI_TE_DSILINK;
 8004d10:	4b4c      	ldr	r3, [pc, #304]	; (8004e44 <LCD_Init+0x1b8>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	60da      	str	r2, [r3, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8004d16:	4b4b      	ldr	r3, [pc, #300]	; (8004e44 <LCD_Init+0x1b8>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	611a      	str	r2, [r3, #16]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8004d1c:	4b49      	ldr	r3, [pc, #292]	; (8004e44 <LCD_Init+0x1b8>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	621a      	str	r2, [r3, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8004d22:	4b48      	ldr	r3, [pc, #288]	; (8004e44 <LCD_Init+0x1b8>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8004d28:	4b46      	ldr	r3, [pc, #280]	; (8004e44 <LCD_Init+0x1b8>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_DSI_ConfigAdaptedCommandMode(&hdsi_eval, &CmdCfg);
 8004d2e:	4945      	ldr	r1, [pc, #276]	; (8004e44 <LCD_Init+0x1b8>)
 8004d30:	4841      	ldr	r0, [pc, #260]	; (8004e38 <LCD_Init+0x1ac>)
 8004d32:	f7fd fd34 	bl	800279e <HAL_DSI_ConfigAdaptedCommandMode>

  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8004d36:	4b44      	ldr	r3, [pc, #272]	; (8004e48 <LCD_Init+0x1bc>)
 8004d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d3c:	601a      	str	r2, [r3, #0]
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8004d3e:	4b42      	ldr	r3, [pc, #264]	; (8004e48 <LCD_Init+0x1bc>)
 8004d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d44:	605a      	str	r2, [r3, #4]
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8004d46:	4b40      	ldr	r3, [pc, #256]	; (8004e48 <LCD_Init+0x1bc>)
 8004d48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d4c:	609a      	str	r2, [r3, #8]
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8004d4e:	4b3e      	ldr	r3, [pc, #248]	; (8004e48 <LCD_Init+0x1bc>)
 8004d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d54:	60da      	str	r2, [r3, #12]
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8004d56:	4b3c      	ldr	r3, [pc, #240]	; (8004e48 <LCD_Init+0x1bc>)
 8004d58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d5c:	611a      	str	r2, [r3, #16]
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8004d5e:	4b3a      	ldr	r3, [pc, #232]	; (8004e48 <LCD_Init+0x1bc>)
 8004d60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d64:	615a      	str	r2, [r3, #20]
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8004d66:	4b38      	ldr	r3, [pc, #224]	; (8004e48 <LCD_Init+0x1bc>)
 8004d68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d6c:	619a      	str	r2, [r3, #24]
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8004d6e:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <LCD_Init+0x1bc>)
 8004d70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d74:	61da      	str	r2, [r3, #28]
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8004d76:	4b34      	ldr	r3, [pc, #208]	; (8004e48 <LCD_Init+0x1bc>)
 8004d78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d7c:	621a      	str	r2, [r3, #32]
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8004d7e:	4b32      	ldr	r3, [pc, #200]	; (8004e48 <LCD_Init+0x1bc>)
 8004d80:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8004d86:	4b30      	ldr	r3, [pc, #192]	; (8004e48 <LCD_Init+0x1bc>)
 8004d88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d8c:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_DSI_ConfigCommand(&hdsi_eval, &LPCmd);
 8004d8e:	492e      	ldr	r1, [pc, #184]	; (8004e48 <LCD_Init+0x1bc>)
 8004d90:	4829      	ldr	r0, [pc, #164]	; (8004e38 <LCD_Init+0x1ac>)
 8004d92:	f7fd fddb 	bl	800294c <HAL_DSI_ConfigCommand>

  PhyTimings.ClockLaneHS2LPTime = 35;
 8004d96:	4b2d      	ldr	r3, [pc, #180]	; (8004e4c <LCD_Init+0x1c0>)
 8004d98:	2223      	movs	r2, #35	; 0x23
 8004d9a:	601a      	str	r2, [r3, #0]
  PhyTimings.ClockLaneLP2HSTime = 35;
 8004d9c:	4b2b      	ldr	r3, [pc, #172]	; (8004e4c <LCD_Init+0x1c0>)
 8004d9e:	2223      	movs	r2, #35	; 0x23
 8004da0:	605a      	str	r2, [r3, #4]
  PhyTimings.DataLaneHS2LPTime = 35;
 8004da2:	4b2a      	ldr	r3, [pc, #168]	; (8004e4c <LCD_Init+0x1c0>)
 8004da4:	2223      	movs	r2, #35	; 0x23
 8004da6:	609a      	str	r2, [r3, #8]
  PhyTimings.DataLaneLP2HSTime = 35;
 8004da8:	4b28      	ldr	r3, [pc, #160]	; (8004e4c <LCD_Init+0x1c0>)
 8004daa:	2223      	movs	r2, #35	; 0x23
 8004dac:	60da      	str	r2, [r3, #12]
  PhyTimings.DataLaneMaxReadTime = 0;
 8004dae:	4b27      	ldr	r3, [pc, #156]	; (8004e4c <LCD_Init+0x1c0>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	611a      	str	r2, [r3, #16]
  PhyTimings.StopWaitTime = 10;
 8004db4:	4b25      	ldr	r3, [pc, #148]	; (8004e4c <LCD_Init+0x1c0>)
 8004db6:	220a      	movs	r2, #10
 8004db8:	615a      	str	r2, [r3, #20]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 8004dba:	4924      	ldr	r1, [pc, #144]	; (8004e4c <LCD_Init+0x1c0>)
 8004dbc:	481e      	ldr	r0, [pc, #120]	; (8004e38 <LCD_Init+0x1ac>)
 8004dbe:	f7fd fe4b 	bl	8002a58 <HAL_DSI_ConfigPhyTimer>

  LTDC_Init();
 8004dc2:	f000 f845 	bl	8004e50 <LTDC_Init>
  HAL_DSI_Start(&(hdsi_eval));
 8004dc6:	481c      	ldr	r0, [pc, #112]	; (8004e38 <LCD_Init+0x1ac>)
 8004dc8:	f7fd feb0 	bl	8002b2c <HAL_DSI_Start>

#if defined (USE_STM32469I_DISCO_REVC)
  NT35510_Init(NT35510_FORMAT_RGB888, LCD_ORIENTATION_LANDSCAPE);
 8004dcc:	2101      	movs	r1, #1
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f7fb fb8e 	bl	80004f0 <NT35510_Init>
#else
  OTM8009A_Init(OTM8009A_COLMOD_RGB888, LCD_ORIENTATION_LANDSCAPE);
#endif

  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8004dd4:	4b1c      	ldr	r3, [pc, #112]	; (8004e48 <LCD_Init+0x1bc>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]


  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_DISABLE;
 8004dda:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <LCD_Init+0x1bc>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	605a      	str	r2, [r3, #4]
  LPCmd.LPGenShortWriteTwoP   = DSI_LP_GSW2P_DISABLE;
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <LCD_Init+0x1bc>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	609a      	str	r2, [r3, #8]
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_DISABLE;
 8004de6:	4b18      	ldr	r3, [pc, #96]	; (8004e48 <LCD_Init+0x1bc>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	60da      	str	r2, [r3, #12]
  LPCmd.LPGenShortReadOneP    = DSI_LP_GSR1P_DISABLE;
 8004dec:	4b16      	ldr	r3, [pc, #88]	; (8004e48 <LCD_Init+0x1bc>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	611a      	str	r2, [r3, #16]
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_DISABLE;
 8004df2:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <LCD_Init+0x1bc>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	615a      	str	r2, [r3, #20]
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_DISABLE;
 8004df8:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <LCD_Init+0x1bc>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	619a      	str	r2, [r3, #24]
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_DISABLE;
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <LCD_Init+0x1bc>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	61da      	str	r2, [r3, #28]
  LPCmd.LPDcsShortWriteOneP   = DSI_LP_DSW1P_DISABLE;
 8004e04:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <LCD_Init+0x1bc>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	621a      	str	r2, [r3, #32]
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_DISABLE;
 8004e0a:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <LCD_Init+0x1bc>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_DISABLE;
 8004e10:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <LCD_Init+0x1bc>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_DSI_ConfigCommand(&hdsi_eval, &LPCmd);
 8004e16:	490c      	ldr	r1, [pc, #48]	; (8004e48 <LCD_Init+0x1bc>)
 8004e18:	4807      	ldr	r0, [pc, #28]	; (8004e38 <LCD_Init+0x1ac>)
 8004e1a:	f7fd fd97 	bl	800294c <HAL_DSI_ConfigCommand>
  
   HAL_DSI_ConfigFlowControl(&hdsi_eval, DSI_FLOW_CONTROL_BTA);
 8004e1e:	2104      	movs	r1, #4
 8004e20:	4805      	ldr	r0, [pc, #20]	; (8004e38 <LCD_Init+0x1ac>)
 8004e22:	f7fd fdf1 	bl	8002a08 <HAL_DSI_ConfigFlowControl>

  HAL_DSI_Refresh(&hdsi_eval);
 8004e26:	4804      	ldr	r0, [pc, #16]	; (8004e38 <LCD_Init+0x1ac>)
 8004e28:	f7fd febc 	bl	8002ba4 <HAL_DSI_Refresh>
  
  return LCD_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000294 	.word	0x20000294
 8004e38:	20000158 	.word	0x20000158
 8004e3c:	40016c00 	.word	0x40016c00
 8004e40:	200002d0 	.word	0x200002d0
 8004e44:	200002dc 	.word	0x200002dc
 8004e48:	20000308 	.word	0x20000308
 8004e4c:	2000033c 	.word	0x2000033c

08004e50 <LTDC_Init>:
 * synchronization timings, polarities, and the framebuffer line length. This setup
 * is essential for the LTDC to correctly drive the LCD.
 */

void LTDC_Init(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0

  hltdc_eval.Instance = LTDC;
 8004e54:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <LTDC_Init+0x88>)
 8004e56:	4a21      	ldr	r2, [pc, #132]	; (8004edc <LTDC_Init+0x8c>)
 8004e58:	601a      	str	r2, [r3, #0]
  HAL_LTDC_DeInit(&hltdc_eval);
 8004e5a:	481f      	ldr	r0, [pc, #124]	; (8004ed8 <LTDC_Init+0x88>)
 8004e5c:	f7fe fa14 	bl	8003288 <HAL_LTDC_DeInit>
  

  hltdc_eval.Init.HorizontalSync = HSYNC;
 8004e60:	4b1d      	ldr	r3, [pc, #116]	; (8004ed8 <LTDC_Init+0x88>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	615a      	str	r2, [r3, #20]
  hltdc_eval.Init.VerticalSync = VSYNC;
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <LTDC_Init+0x88>)
 8004e68:	2201      	movs	r2, #1
 8004e6a:	619a      	str	r2, [r3, #24]
  hltdc_eval.Init.AccumulatedHBP = HSYNC+HBP;
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ed8 <LTDC_Init+0x88>)
 8004e6e:	2202      	movs	r2, #2
 8004e70:	61da      	str	r2, [r3, #28]
  hltdc_eval.Init.AccumulatedVBP = VSYNC+VBP;
 8004e72:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <LTDC_Init+0x88>)
 8004e74:	2202      	movs	r2, #2
 8004e76:	621a      	str	r2, [r3, #32]
  hltdc_eval.Init.AccumulatedActiveH = VSYNC+VBP+VACT;
 8004e78:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <LTDC_Init+0x88>)
 8004e7a:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8004e7e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc_eval.Init.AccumulatedActiveW = HSYNC+HBP+HACT;
 8004e80:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <LTDC_Init+0x88>)
 8004e82:	f240 3222 	movw	r2, #802	; 0x322
 8004e86:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc_eval.Init.TotalHeigh = VSYNC+VBP+VACT+VFP;
 8004e88:	4b13      	ldr	r3, [pc, #76]	; (8004ed8 <LTDC_Init+0x88>)
 8004e8a:	f240 12e3 	movw	r2, #483	; 0x1e3
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc_eval.Init.TotalWidth = HSYNC+HBP+HACT+HFP;
 8004e90:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <LTDC_Init+0x88>)
 8004e92:	f240 3223 	movw	r2, #803	; 0x323
 8004e96:	62da      	str	r2, [r3, #44]	; 0x2c
  

  hltdc_eval.Init.Backcolor.Blue = 0;
 8004e98:	4b0f      	ldr	r3, [pc, #60]	; (8004ed8 <LTDC_Init+0x88>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_eval.Init.Backcolor.Green = 0;
 8004ea0:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <LTDC_Init+0x88>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_eval.Init.Backcolor.Red = 0;
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <LTDC_Init+0x88>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  

  hltdc_eval.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004eb0:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <LTDC_Init+0x88>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	605a      	str	r2, [r3, #4]
  hltdc_eval.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004eb6:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <LTDC_Init+0x88>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	609a      	str	r2, [r3, #8]
  hltdc_eval.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <LTDC_Init+0x88>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	60da      	str	r2, [r3, #12]
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <LTDC_Init+0x88>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	611a      	str	r2, [r3, #16]
  hltdc_eval.Instance = LTDC;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <LTDC_Init+0x88>)
 8004eca:	4a04      	ldr	r2, [pc, #16]	; (8004edc <LTDC_Init+0x8c>)
 8004ecc:	601a      	str	r2, [r3, #0]

  HAL_LTDC_Init(&hltdc_eval);
 8004ece:	4802      	ldr	r0, [pc, #8]	; (8004ed8 <LTDC_Init+0x88>)
 8004ed0:	f7fe f90a 	bl	80030e8 <HAL_LTDC_Init>
}
 8004ed4:	bf00      	nop
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	200000b0 	.word	0x200000b0
 8004edc:	40016800 	.word	0x40016800

08004ee0 <LCD_BriefDisplay>:
 *
 * This function sets the font, background and text colors, and displays a few strings
 * on the LCD. It's used to show an initial message or status on the screen.
 */
static void LCD_BriefDisplay(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  BSP_LCD_SetFont(&Font24);  
 8004ee4:	4817      	ldr	r0, [pc, #92]	; (8004f44 <LCD_BriefDisplay+0x64>)
 8004ee6:	f7fb fe15 	bl	8000b14 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8004eea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004eee:	f7fb fddf 	bl	8000ab0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, 800, 112);  
 8004ef2:	2370      	movs	r3, #112	; 0x70
 8004ef4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004ef8:	2100      	movs	r1, #0
 8004efa:	2000      	movs	r0, #0
 8004efc:	f7fb ff5e 	bl	8000dbc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	f7fb fdd4 	bl	8000ab0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 112, 800, 368);
 8004f08:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8004f0c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004f10:	2170      	movs	r1, #112	; 0x70
 8004f12:	2000      	movs	r0, #0
 8004f14:	f7fb ff52 	bl	8000dbc <BSP_LCD_FillRect>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8004f18:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004f1c:	f7fb fde0 	bl	8000ae0 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(1, (uint8_t *)"                    CCTV FEED");
 8004f20:	4909      	ldr	r1, [pc, #36]	; (8004f48 <LCD_BriefDisplay+0x68>)
 8004f22:	2001      	movs	r0, #1
 8004f24:	f7fb ff32 	bl	8000d8c <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_SetFont(&Font16);
 8004f28:	4808      	ldr	r0, [pc, #32]	; (8004f4c <LCD_BriefDisplay+0x6c>)
 8004f2a:	f7fb fdf3 	bl	8000b14 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"                  THIS IS SHOWINGH YOUR FRONT DOOR");
 8004f2e:	4908      	ldr	r1, [pc, #32]	; (8004f50 <LCD_BriefDisplay+0x70>)
 8004f30:	2004      	movs	r0, #4
 8004f32:	f7fb ff2b 	bl	8000d8c <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"                  USE THE SWITCH BUTTON TO SWITCH VIEW ");
 8004f36:	4907      	ldr	r1, [pc, #28]	; (8004f54 <LCD_BriefDisplay+0x74>)
 8004f38:	2005      	movs	r0, #5
 8004f3a:	f7fb ff27 	bl	8000d8c <BSP_LCD_DisplayStringAtLine>
  
}
 8004f3e:	bf00      	nop
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000020 	.word	0x20000020
 8004f48:	08005140 	.word	0x08005140
 8004f4c:	20000030 	.word	0x20000030
 8004f50:	08005160 	.word	0x08005160
 8004f54:	08005194 	.word	0x08005194

08004f58 <CopyBuffer>:
 * @param xsize The width of the area to be copied.
 * @param ysize The height of the area to be copied.
 */

static void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize)
{   
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4611      	mov	r1, r2
 8004f64:	461a      	mov	r2, r3
 8004f66:	460b      	mov	r3, r1
 8004f68:	80fb      	strh	r3, [r7, #6]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80bb      	strh	r3, [r7, #4]
  
  uint32_t destination = (uint32_t)pDst + (y * 800 + x) * 4;
 8004f6e:	88bb      	ldrh	r3, [r7, #4]
 8004f70:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004f74:	fb03 f202 	mul.w	r2, r3, r2
 8004f78:	88fb      	ldrh	r3, [r7, #6]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4413      	add	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
  uint32_t source      = (uint32_t)pSrc;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	613b      	str	r3, [r7, #16]
  
  hdma2d.Init.Mode         = DMA2D_M2M;
 8004f8a:	4b1f      	ldr	r3, [pc, #124]	; (8005008 <CopyBuffer+0xb0>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
 8004f90:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <CopyBuffer+0xb0>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 800 - xsize;     
 8004f96:	8c3b      	ldrh	r3, [r7, #32]
 8004f98:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4b1a      	ldr	r3, [pc, #104]	; (8005008 <CopyBuffer+0xb0>)
 8004fa0:	60da      	str	r2, [r3, #12]
  
  hdma2d.XferCpltCallback  = NULL;
 8004fa2:	4b19      	ldr	r3, [pc, #100]	; (8005008 <CopyBuffer+0xb0>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	611a      	str	r2, [r3, #16]
  
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004fa8:	4b17      	ldr	r3, [pc, #92]	; (8005008 <CopyBuffer+0xb0>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004fae:	4b16      	ldr	r3, [pc, #88]	; (8005008 <CopyBuffer+0xb0>)
 8004fb0:	22ff      	movs	r2, #255	; 0xff
 8004fb2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8004fb4:	4b14      	ldr	r3, [pc, #80]	; (8005008 <CopyBuffer+0xb0>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].InputOffset = 0;
 8004fba:	4b13      	ldr	r3, [pc, #76]	; (8005008 <CopyBuffer+0xb0>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28

  hdma2d.Instance          = DMA2D; 
 8004fc0:	4b11      	ldr	r3, [pc, #68]	; (8005008 <CopyBuffer+0xb0>)
 8004fc2:	4a12      	ldr	r2, [pc, #72]	; (800500c <CopyBuffer+0xb4>)
 8004fc4:	601a      	str	r2, [r3, #0]
   
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) 
 8004fc6:	4810      	ldr	r0, [pc, #64]	; (8005008 <CopyBuffer+0xb0>)
 8004fc8:	f7fc fe8a 	bl	8001ce0 <HAL_DMA2D_Init>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d116      	bne.n	8005000 <CopyBuffer+0xa8>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK) 
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	480c      	ldr	r0, [pc, #48]	; (8005008 <CopyBuffer+0xb0>)
 8004fd6:	f7fc ffeb 	bl	8001fb0 <HAL_DMA2D_ConfigLayer>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10f      	bne.n	8005000 <CopyBuffer+0xa8>
    {
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8004fe0:	8c3a      	ldrh	r2, [r7, #32]
 8004fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	6939      	ldr	r1, [r7, #16]
 8004fec:	4806      	ldr	r0, [pc, #24]	; (8005008 <CopyBuffer+0xb0>)
 8004fee:	f7fc feca 	bl	8001d86 <HAL_DMA2D_Start>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d103      	bne.n	8005000 <CopyBuffer+0xa8>
      {
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8004ff8:	2164      	movs	r1, #100	; 0x64
 8004ffa:	4803      	ldr	r0, [pc, #12]	; (8005008 <CopyBuffer+0xb0>)
 8004ffc:	f7fc feee 	bl	8001ddc <HAL_DMA2D_PollForTransfer>
      }
    }
  }   
}
 8005000:	bf00      	nop
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000254 	.word	0x20000254
 800500c:	4002b000 	.word	0x4002b000

08005010 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
}
 8005014:	bf00      	nop
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800501e:	b480      	push	{r7}
 8005020:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005022:	e7fe      	b.n	8005022 <HardFault_Handler+0x4>

08005024 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8005028:	e7fe      	b.n	8005028 <MemManage_Handler+0x4>

0800502a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800502a:	b480      	push	{r7}
 800502c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800502e:	e7fe      	b.n	800502e <BusFault_Handler+0x4>

08005030 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005034:	e7fe      	b.n	8005034 <UsageFault_Handler+0x4>

08005036 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8005036:	b480      	push	{r7}
 8005038:	af00      	add	r7, sp, #0
}
 800503a:	bf00      	nop
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
}
 8005048:	bf00      	nop
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8005052:	b480      	push	{r7}
 8005054:	af00      	add	r7, sp, #0
}
 8005056:	bf00      	nop
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8005064:	f7fc fb28 	bl	80016b8 <HAL_IncTick>
}
 8005068:	bf00      	nop
 800506a:	bd80      	pop	{r7, pc}

0800506c <LTDC_IRQHandler>:
  * @brief  This function handles LTDC interrupt request.
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hltdc_eval);
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <LTDC_IRQHandler+0x10>)
 8005072:	f7fe f974 	bl	800335e <HAL_LTDC_IRQHandler>
}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	200000b0 	.word	0x200000b0

08005080 <DSI_IRQHandler>:
  * @brief  This function handles DSI Handler.
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  HAL_DSI_IRQHandler(&hdsi_eval);
 8005084:	4802      	ldr	r0, [pc, #8]	; (8005090 <DSI_IRQHandler+0x10>)
 8005086:	f7fd faad 	bl	80025e4 <HAL_DSI_IRQHandler>
}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20000158 	.word	0x20000158

08005094 <__libc_init_array>:
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	4d0d      	ldr	r5, [pc, #52]	; (80050cc <__libc_init_array+0x38>)
 8005098:	4c0d      	ldr	r4, [pc, #52]	; (80050d0 <__libc_init_array+0x3c>)
 800509a:	1b64      	subs	r4, r4, r5
 800509c:	10a4      	asrs	r4, r4, #2
 800509e:	2600      	movs	r6, #0
 80050a0:	42a6      	cmp	r6, r4
 80050a2:	d109      	bne.n	80050b8 <__libc_init_array+0x24>
 80050a4:	4d0b      	ldr	r5, [pc, #44]	; (80050d4 <__libc_init_array+0x40>)
 80050a6:	4c0c      	ldr	r4, [pc, #48]	; (80050d8 <__libc_init_array+0x44>)
 80050a8:	f000 f818 	bl	80050dc <_init>
 80050ac:	1b64      	subs	r4, r4, r5
 80050ae:	10a4      	asrs	r4, r4, #2
 80050b0:	2600      	movs	r6, #0
 80050b2:	42a6      	cmp	r6, r4
 80050b4:	d105      	bne.n	80050c2 <__libc_init_array+0x2e>
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050bc:	4798      	blx	r3
 80050be:	3601      	adds	r6, #1
 80050c0:	e7ee      	b.n	80050a0 <__libc_init_array+0xc>
 80050c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c6:	4798      	blx	r3
 80050c8:	3601      	adds	r6, #1
 80050ca:	e7f2      	b.n	80050b2 <__libc_init_array+0x1e>
 80050cc:	0805375c 	.word	0x0805375c
 80050d0:	0805375c 	.word	0x0805375c
 80050d4:	0805375c 	.word	0x0805375c
 80050d8:	08053760 	.word	0x08053760

080050dc <_init>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	bf00      	nop
 80050e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e2:	bc08      	pop	{r3}
 80050e4:	469e      	mov	lr, r3
 80050e6:	4770      	bx	lr

080050e8 <_fini>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	bf00      	nop
 80050ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ee:	bc08      	pop	{r3}
 80050f0:	469e      	mov	lr, r3
 80050f2:	4770      	bx	lr
